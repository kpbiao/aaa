{"version":3,"sources":["webpack:///./src/modules/module.customer/index.tsx","webpack:///./src/modules/module.customer/selectors.ts","webpack:///./src/modules/module.customer/index.module.less"],"names":["input","Search","module_customer_Customer","Customer","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","keywordInput","getIspermission","key","permissions","isPermissions","map","item","get","toArray","err","emitEmpty","focus","setState","keyword","hanldCustomerAddSuccess","options","hanldModelCancel","utmsCustomerId","currentItem","editCustomer","fetchCustomersData","customerAddVisible","showModal","record","hideModal","getCustomers","current","react","_this2","_this$props","_this$props$customers","customers","loading","customersTotal","columns","getColumns","paginationConfig","total","count","onChange","onShowSizeChange","card","title","bordered","extra","es_button","type","Link","to","renderSearchForm","MyTable","dataSource","data","pagination","rowKey","_this3","suffix","icon","onClick","style","marginBottom","placeholder","width","marginRight","value","onPressEnter","e","skipCount","target","ref","node","_this$props$customers3","totalInfo","xs","sm","lg","xl","className","index_module_default","a","totalInfoCard","totalCard","row","gutter","col","totalCnt","GLOBAL","emptyRecord","releaseCnt","tradeCnt","revenue","_this4","deleteCustomer","dataIndex","render","text","address","concat","province","city","region","salesman","length","d","i","dot","jobcard","name","addCustomerButton","es_divider","divider","popconfirm","onConfirm","href","deleteCustomerButton","__webpack_exports__","_ref","routeId","actions","selectState","mapStateToProps","Object","libfrom_dll_reference_dll","error","selectors_makeSelectError","selectors_makeSelectLoading","selectors_makeCustomers","selectors_makeCustomersTotal","withConnect","es","dispatch","opts","getCustomersTotal","redux","module","exports","ant-card-body"],"mappings":"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","file":"customer.74e63c5f.chunk.js","sourcesContent":["/**\n * Customer Component\n * @author yanrong.tian\n * @date 2018-9-13 14:19:59\n */\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Col from 'antd/es/col';\nimport Divider from 'antd/es/divider';\nimport Icon from 'antd/es/icon';\nimport Input from 'antd/es/input';\nimport Popconfirm from 'antd/es/popconfirm';\nimport Row from 'antd/es/row';\nimport MyTable from 'components/MyTable';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport GLOBAL from 'utils/GLOBAL';\nimport styles from './index.module.less';\nimport {\n  makeCustomers,\n  makeCustomersTotal,\n  makeSelectError,\n  makeSelectLoading,\n} from './selectors';\n\nconst Search = Input.Search;\n\ninterface IProps {\n  children: React.ReactChildren;\n  deleteCustomer: (options: any) => void;\n  getCustomers: (options: any) => void;\n  getCustomersTotal: () => void;\n  editCustomer: (options: any) => void;\n  permissions: any;\n}\n\ninterface IState {\n  customerAddVisible: boolean;\n  currentItem?: object;\n  keyword: string;\n  current: number;\n}\n\nclass Customer extends React.PureComponent<IProps> {\n  state: IState;\n  keywordInput: any;\n  constructor(props) {\n    super(props);\n    this.state = {\n      customerAddVisible: false,\n      keyword: '',\n      current: 1,\n    };\n  }\n  public componentDidMount() {\n    this.fetchCustomersData();\n    // this.props.getCustomersTotal();\n  }\n\n  public render() {\n    const { customers = {}, customersTotal = {}, loading }: any = this.props;\n    const { current } = this.state;\n    const columns = this.getColumns();\n    const paginationConfig = {\n      total: customers.count,\n      onChange: this.fetchCustomersData,\n      onShowSizeChange: this.fetchCustomersData,\n      current,\n    };\n    const buttonAdd = () => {\n      if (!this.getIspermission('/customer/add')) {\n        return '';\n      }\n      return (\n        <Button type=\"primary\">\n          <Link to=\"/customer/add\">新建客户</Link>\n        </Button>\n      );\n    };\n    return (\n      <div>\n        {/* {this.renderTotalInfo()} */}\n        <Card title=\"客户列表\" bordered={true} extra={buttonAdd()}>\n          {this.renderSearchForm()}\n          <MyTable\n            columns={columns}\n            dataSource={customers.data}\n            pagination={paginationConfig}\n            rowKey={'utmsCustomerId'}\n            loading={loading}\n          />\n        </Card>\n        {/* <CustomerAddModal\n          visible={this.state.customerAddVisible}\n          onCancel={this.hanldModelCancel}\n          onOk={this.hanldCustomerAddSuccess}\n          data={this.state.currentItem}\n        /> */}\n      </div>\n    );\n  }\n\n  private getIspermission = key => {\n    const { permissions } = this.props;\n    let isPermissions = false;\n    try {\n      permissions\n        .map(item => {\n          if (key === item.get('operateKey')) {\n            isPermissions = true;\n          }\n        })\n        .toArray();\n    } catch (err) {\n      //\n    }\n    return isPermissions;\n  };\n\n  private emitEmpty = () => {\n    this.keywordInput.focus();\n    this.setState({ keyword: '' });\n  };\n\n  private renderSearchForm() {\n    const { keyword } = this.state;\n    const suffix = keyword ? (\n      <Icon type=\"close-circle\" onClick={this.emitEmpty} />\n    ) : null;\n    return (\n      <div style={{ marginBottom: 15 }}>\n        <Input\n          placeholder=\"客户名称/联系方式\"\n          style={{ width: 250, marginRight: 15 }}\n          suffix={suffix}\n          value={keyword || ''}\n          onPressEnter={e => {\n            this.fetchCustomersData({\n              skipCount: 0,\n              keyword: this.state.keyword,\n            });\n          }}\n          onChange={e => {\n            this.setState({\n              keyword: e.target.value,\n            });\n          }}\n          ref={node => (this.keywordInput = node)}\n        />\n        <Button\n          type=\"primary\"\n          style={{ marginRight: 12 }}\n          onClick={() => {\n            this.fetchCustomersData({\n              skipCount: 0,\n              keyword: this.state.keyword,\n            });\n          }}\n        >\n          查询\n        </Button>\n        <Button\n          onClick={() => {\n            this.setState({\n              keyword: '',\n            });\n            this.fetchCustomersData({\n              skipCount: 0,\n              keyword: '',\n            });\n          }}\n        >\n          重置\n        </Button>\n      </div>\n    );\n  }\n\n  private renderTotalInfo() {\n    const { customersTotal = {} }: any = this.props;\n    const totalInfo = {\n      xs: 6,\n      sm: 6,\n      lg: 6,\n      xl: 6,\n      className: styles.totalInfoCard,\n    };\n    return (\n      <Card className={styles.totalCard}>\n        <Row gutter={10}>\n          <Col {...totalInfo}>\n            <h3>总客户</h3>\n            <p>{customersTotal.totalCnt || GLOBAL.emptyRecord}</p>\n          </Col>\n          <Col {...totalInfo}>\n            <h3>累计发货客户</h3>\n            <p>{customersTotal.releaseCnt || GLOBAL.emptyRecord}</p>\n          </Col>\n          <Col {...totalInfo}>\n            <h3>客户总订单</h3>\n            <p>{customersTotal.tradeCnt || GLOBAL.emptyRecord}</p>\n          </Col>\n          <Col {...totalInfo}>\n            <h3>客户总营收（万）</h3>\n            <p>{customersTotal.revenue || GLOBAL.emptyRecord}</p>\n          </Col>\n        </Row>\n      </Card>\n    );\n  }\n\n  private hanldCustomerAddSuccess = options => {\n    this.hanldModelCancel();\n    if (options.utmsCustomerId) {\n      this.setState({\n        currentItem: options,\n      });\n      this.props.editCustomer(options);\n    } else {\n      this.fetchCustomersData();\n    }\n  };\n\n  private hanldModelCancel = () => {\n    this.setState({\n      customerAddVisible: false,\n    });\n  };\n\n  private getColumns() {\n    const { deleteCustomer } = this.props;\n\n    const addCustomerButton = record => {\n      if (this.getIspermission('/customer/edit')) {\n        return (\n          <Link to={`/customer/edit?id=${record.utmsCustomerId}`}>修改</Link>\n        );\n      }\n      return <span />;\n    };\n\n    const deleteCustomerButton = record => {\n      if (this.getIspermission('deleteCustomer')) {\n        return (\n          <Popconfirm\n            title=\"确认删除\"\n            onConfirm={() => deleteCustomer(record.utmsCustomerId)}\n          >\n            <a href=\"javascript:;\">删除</a>\n          </Popconfirm>\n        );\n      }\n      return <span />;\n    };\n\n    const divider = () => {\n      if (this.getIspermission('deleteCustomer')) {\n        return <Divider type=\"vertical\" />;\n      }\n    };\n    return [\n      {\n        title: '客户名称',\n        dataIndex: 'customerName',\n        key: 'customerName',\n      },\n      {\n        title: '联系人',\n        dataIndex: 'contact',\n        key: 'contact',\n        render: (text, record) => {\n          return (\n            <span className=\"my-nowrap\">{text || GLOBAL.emptyRecord}</span>\n          );\n        },\n      },\n      {\n        title: '联系方式',\n        dataIndex: 'contactWay',\n        key: 'contactWay',\n        render: (text, record) => {\n          return (\n            <span className=\"my-nowrap\">{text || GLOBAL.emptyRecord}</span>\n          );\n        },\n      },\n      {\n        title: '公司地址',\n        key: 'organizationName',\n        render: (text, record) => {\n          let address = GLOBAL.emptyRecord;\n          if (record.address) {\n            address = `${record.province || ''} ${record.city ||\n              ''} ${record.region || ''} ${record.address}`;\n          }\n          return address;\n        },\n      },\n      {\n        title: '销售经理',\n        key: 'salesman',\n        render: (text, record) => {\n          const salesman = text.salesman || [];\n          if (!salesman.length) {\n            return GLOBAL.emptyRecord;\n          }\n          return salesman.map((d, i) => {\n            const dot = i === salesman.length - 1 ? '' : '、';\n            return (\n              <span key={d.jobcard} className=\"my-nowrap\">\n                {d.name}\n                {dot}\n              </span>\n            );\n          });\n        },\n      },\n      {\n        title: '操作',\n        key: 'action',\n        render: (text, record) => (\n          <span className=\"my-nowrap\">\n            {addCustomerButton(record)}\n            {divider()}\n            {deleteCustomerButton(record)}\n          </span>\n        ),\n      },\n    ];\n  }\n\n  private showModal = record => {\n    this.setState({\n      customerAddVisible: true,\n      currentItem: record,\n    });\n  };\n\n  private hideModal = utmsCustomerId => {\n    this.setState({\n      customerAddVisible: false,\n    });\n  };\n\n  // 获取客户列表数据\n  private fetchCustomersData: any = options => {\n    this.props.getCustomers(options);\n    this.setState({\n      current: (options ? options.current : 1) || 1,\n    });\n  };\n}\n\nexport default ({ routeId, actions }) => {\n  const mapDispatchToProps = dispatch => ({\n    getCustomers: opts => dispatch(actions.getCustomers(opts)),\n    deleteCustomer: opts => dispatch(actions.deleteCustomer(opts)),\n    getCustomersTotal: opts => dispatch(actions.getCustomersTotal(opts)),\n    editCustomer: opts => dispatch(actions.editCustomer(opts)),\n  });\n\n  const selectState = state => state.get(routeId);\n  const mapStateToProps = createStructuredSelector({\n    error: makeSelectError(selectState),\n    loading: makeSelectLoading(selectState),\n    customers: makeCustomers(selectState),\n    customersTotal: makeCustomersTotal(selectState),\n  });\n\n  const withConnect = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  );\n\n  return compose(withConnect)(Customer);\n};\n","/**\n * Customer selectors\n * @author yanrong.tian\n * @date 2018-9-13 14:19:59\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeCustomers = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('customers'),\n  );\n\nexport const makeCustomersTotal = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('customersTotal'),\n  );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"totalCard\":\"_39me9\",\"ant-card-body\":\"_13DoM\",\"totalInfoCard\":\"_20_Io\"};"],"sourceRoot":""}