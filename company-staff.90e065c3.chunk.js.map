{"version":3,"sources":["webpack:///./src/modules/module.company.staff/index.module.less","webpack:///./src/modules/module.company.staff/components/EditStaffModal.tsx","webpack:///./src/modules/module.company.staff/selectors.ts","webpack:///./src/modules/module.company.staff/index.tsx"],"names":["module","exports","StaffList","StaffList__Form","StaffList__FormAction","StaffList__RightAction","StaffList__SelectAction","link_disable","FormItem","es_form","Item","Option","es_select","itemLayout","labelCol","span","wrapperCol","EditStaffModal_EditStaff","EditStaff","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","getDictionaryList","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","type","result","wrap","_context","prev","next","Object","service","parentDictionaryCode","sent","abrupt","data","stop","_x","apply","arguments","handleSubmit","_this$props","form","onConfirm","getFieldValue","validateFields","errors","values","assign","utmsUsersId","handleClose","setState","checkedDepartment","checkedPosition","onClose","removeOption","_ref2","_callee2","option","params","newState","_context2","bizType","dictionaryCode","t0","immutable_esfrom_dll_reference_dll","t1","_x2","_x3","addOption","_ref3","_callee3","_context3","_x4","_x5","addToForm","options","setFieldsValue","departmentNames","filter","checked","map","value","join","postNames","state","resetSelect","departmentList","positionList","react","nextProps","visible","departments","positions","_this2","_this$props2","companyTree","selectedNode","formValue","getFieldDecorator","_this$state","initialCompany","company","index","key","get","departmentArray","split","positionArray","departmentProps","d","includes","toArray","placeholder","addInputPlaceHolder","addBtnText","tagSize","optionSize","positionProps","isMuti","_extends","label","required","rules","message","input","autoComplete","maxLength","disabled","initialValue","getPopupContainer","triggerNode","parentNode","pattern","commonRegExp","MutiSelectWithEditableOptions","_this$props3","modalProps","title","centered","maskClosable","onOk","onCancel","modal","renderEditor","components_EditStaffModal","create","mapPropsToFields","formObj","toObject","organizationCode","keys","createFormField","_objectSpread","authData","Content","layout","module_company_staff_FormItem","module_company_staff_Option","module_company_staff_confirm","menu","confirm","module_company_staff_CompanyStaff","CompanyStaff","module_company_staff_classCallCheck","module_company_staff_possibleConstructorReturn","module_company_staff_getPrototypeOf","paginationChange","skipCount","pageSize","current","doSearch","getFieldsValue","paramObj","status","keywords","trim","getStaffList","onChangeStatus","handleSelect","selected","selectedKeys","e","preventDefault","handleReset","resetFields","handleOpenModal","staff","item","getStaffDetails","userName","resetStaffDetails","openModal","handleCloseModal","handleEditStaff","module_company_staff_asyncToGenerator","selectedKey","success","error","info","content","concat","showToggleStatus","record","realName","confirmStatus","showResetPwd","confirmReset","url","accountInfo","operateType","renderSearchParams","className","index_module_default","a","onSubmit","row","col","onSelect","style","width","es_button","htmlType","onClick","renderStaffOperation","permissionArray","dividerShow","moreBtn","OptionButtons","href","isChecked","_toConsumableArray","h","showAuthModal","hanldUsers","selectedStaff","push","staffList","authStaff","openAuthModal","handleCancel","getCompanyTree","dataCount","loading","onAllCheckChanged","permissions","versionsCode","cur","permission","length","staffArray","tableProps","columns","render","es_checkbox","onChange","onCheckedChanged","dataIndex","text","GLOBAL","emptyRecord","popconfirm","dataSource","mobileNumber","pagination","total","onShowSizeChange","rowKey","checkItemLength","enableItemLength","batchAuthDisable","MyTable","PageBottom","leftChild","rightChild","buttons","StaffAuthorizationSettingModal","card","renderTable","pickStaff","_this$state2","selectedKeysProp","size","selectedNodeProp","SiderCompanyTree","background","renderContent","refreshDictionary","__webpack_exports__","_ref4","routeId","connectModel","actions","selectState","currentState","mapStateToProps","libfrom_dll_reference_dll","selectors_makeSelectLoading","selectors_makeSelectCompanyTree","selectors_makeSelectStaffList","selectors_makePickStaff","selectors_makeSelectDataCount","mapDispatchToProps","dispatch","allCheckedChanged","checkedChanged"],"mappings":"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","file":"company-staff.90e065c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"StaffList\":\"_2Fbfv\",\"StaffList__Form\":\"_3ewWW\",\"StaffList__FormAction\":\"_11iQ8\",\"StaffList__RightAction\":\"_3URWA\",\"StaffList__SelectAction\":\"tZJmY\",\"link_disable\":\"_1z1PW\"};","/**\n * EditStaffModal Component\n * @author HuangSiFei\n * @date 2018-9-14 11:05:19\n */\nimport Col from 'antd/es/col';\nimport Form from 'antd/es/form';\nimport { WrappedFormUtils } from 'antd/es/form/Form';\nimport Input from 'antd/es/input';\nimport Modal from 'antd/es/modal';\nimport Select from 'antd/es/select';\nimport MutiSelectWithEditableOptions from 'components/MutiSelectWithEditableOptions';\nimport { fromJS, is, List, Map } from 'immutable';\nimport * as React from 'react';\nimport { MOBILE_PHONE } from 'utils/commonRegExp';\nimport { addDictionary, deleteDictionary, getDictionary } from '../service';\n\nimport styles from 'modules/module.company.management/index.module.less';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst itemLayout = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 16 },\n};\n\ninterface IEditStaffModalProps {\n  form: any;\n  formValue: any;\n  visible: boolean;\n  companyTree: List<Map<string, any>>;\n  selectedNode: string;\n  onClose: () => void;\n  onConfirm: (values) => void;\n  refreshDictionary: (option) => void;\n}\n\ninterface IEditStaffModalStates {\n  resetSelect: boolean;\n  checkedDepartment: string;\n  checkedPosition: string;\n  departmentList: List<Map<string, any>>;\n  positionList: List<Map<string, any>>;\n}\n\nclass EditStaff extends React.PureComponent<\n  IEditStaffModalProps,\n  IEditStaffModalStates\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      resetSelect: false,\n      checkedDepartment: '',\n      checkedPosition: '',\n      departmentList: List(),\n      positionList: List(),\n    };\n  }\n  public componentWillReceiveProps(nextProps) {\n    if (nextProps.visible && !this.props.visible) {\n      this.setState({ resetSelect: true });\n    } else {\n      this.setState({ resetSelect: false });\n    }\n  }\n  public async componentDidMount() {\n    const departments = await this.getDictionaryList('department');\n    const positions = await this.getDictionaryList('position');\n    this.setState({\n      departmentList: fromJS(departments),\n      positionList: fromJS(positions),\n    });\n  }\n  public getDictionaryList = async type => {\n    const result = await getDictionary({\n      parentDictionaryCode: type,\n    });\n    if (result.result === 'success') {\n      return result.data;\n    }\n  };\n  public handleSubmit = () => {\n    const { form, onConfirm } = this.props;\n    const { getFieldValue } = form;\n    form.validateFields((errors, values) => {\n      if (!errors) {\n        onConfirm(\n          Object.assign(\n            getFieldValue('utmsUsersId')\n              ? { utmsUsersId: getFieldValue('utmsUsersId') }\n              : {},\n            values,\n          ),\n        );\n      }\n    });\n  };\n  public handleClose = () => {\n    this.setState({\n      checkedDepartment: '',\n      checkedPosition: '',\n    });\n    this.props.onClose();\n  };\n  public removeOption = async (type, option) => {\n    const { getFieldValue } = this.props.form;\n    this.setState({\n      checkedDepartment: getFieldValue('departmentNames'),\n      checkedPosition: getFieldValue('postNames'),\n    });\n    const params = {\n      bizType: type,\n      dictionaryCode: option,\n    };\n    const result = await deleteDictionary(params);\n    if (result.result === 'success') {\n      const newState = {};\n      newState[params.bizType + 'List'] = fromJS(\n        await this.getDictionaryList(params.bizType),\n      );\n      this.setState(newState);\n    }\n  };\n  public addOption = async (type, option) => {\n    const { getFieldValue } = this.props.form;\n    this.setState({\n      checkedDepartment: getFieldValue('departmentNames'),\n      checkedPosition: getFieldValue('postNames'),\n    });\n    const params = {\n      bizType: type,\n      dictionaryCode: option,\n    };\n    const result = await addDictionary(params);\n    if (result.result === 'success') {\n      const newState = {};\n      newState[params.bizType + 'List'] = fromJS(\n        await this.getDictionaryList(params.bizType),\n      );\n      this.setState(newState);\n    }\n  };\n  public addToForm = (type, options) => {\n    const { form } = this.props;\n    if (type === 'department') {\n      form.setFieldsValue({\n        departmentNames: options\n          .filter(option => {\n            return option.checked;\n          })\n          .map(option => {\n            return option.value;\n          })\n          .join(','),\n      });\n    } else {\n      form.setFieldsValue({\n        postNames: options\n          .filter(option => {\n            return option.checked;\n          })\n          .map(option => {\n            return option.value;\n          })\n          .join(','),\n      });\n    }\n  };\n  public renderEditor() {\n    const { form, companyTree, selectedNode, formValue } = this.props;\n    const { getFieldDecorator, getFieldValue } = form;\n    const {\n      checkedDepartment,\n      checkedPosition,\n      departmentList,\n      positionList,\n    } = this.state;\n    const departmentNames = getFieldValue('departmentNames') || '';\n    const postNames = getFieldValue('postNames') || '';\n    const initialCompany = selectedNode;\n    const options = companyTree.map((company, index) => {\n      return (\n        <Option key={company.get('organizationCode')}>\n          {company.get('organizationName')}\n        </Option>\n      );\n    });\n    const departmentArray = (departmentNames + ',' + checkedDepartment).split(\n      ',',\n    );\n    const positionArray = (postNames + ',' + checkedPosition).split(',');\n    const departmentProps = {\n      options: departmentList\n        .filter(d => {\n          return d.get('dictionaryCode');\n        })\n        .map(d => ({\n          value: d.get('dictionaryName'),\n          key: d.get('dictionaryCode'),\n          checked: departmentArray.includes(d.get('dictionaryName')),\n        }))\n        .toArray(),\n      placeholder: '选择所属部门',\n      addInputPlaceHolder: '请输入添加部门的名称',\n      addBtnText: '添加部门',\n      resetSelect: this.state.resetSelect,\n      tagSize: 5,\n      optionSize: 20,\n      removeOption: option => this.removeOption('department', option),\n      addOption: option => this.addOption('department', option),\n      addToForm: departments => this.addToForm('department', departments),\n    };\n    const positionProps = {\n      options: positionList\n        .filter(d => {\n          return d.get('dictionaryCode');\n        })\n        .map(d => ({\n          value: d.get('dictionaryName'),\n          key: d.get('dictionaryCode'),\n          checked: positionArray.includes(d.get('dictionaryName')),\n        }))\n        .toArray(),\n      placeholder: '选择所属岗位',\n      addInputPlaceHolder: '请输入添加岗位的名称',\n      addBtnText: '添加岗位',\n      resetSelect: this.state.resetSelect,\n      isMuti: true,\n      tagSize: 5,\n      optionSize: 20,\n      removeOption: option => this.removeOption('position', option),\n      addOption: option => this.addOption('position', option),\n      addToForm: positions => this.addToForm('position', positions),\n    };\n    return (\n      <Form>\n        <FormItem {...itemLayout} label=\"用户名\" required>\n          {getFieldDecorator('userName', {\n            rules: [{ required: true, message: '请输入用户名' }],\n          })(\n            <Input\n              placeholder=\"如工号，姓名，常用名等，用于登录系统使用\"\n              autoComplete=\"off\"\n              maxLength={60}\n              disabled={formValue.get('userName') ? true : false}\n            />,\n          )}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"姓名\" required>\n          {getFieldDecorator('realName', {\n            rules: [{ required: true, message: '输入员工真实姓名' }],\n          })(<Input placeholder=\"输入员工真实姓名\" maxLength={40} />)}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"所属公司\" required>\n          {getFieldDecorator('organizationCode', {\n            initialValue: getFieldValue('organizationCode') || initialCompany,\n            rules: [{ required: true, message: '请输入所属公司' }],\n          })(\n            <Select\n              placeholder=\"请输入所属公司\"\n              getPopupContainer={triggerNode => triggerNode.parentNode}\n            >\n              {options}\n            </Select>,\n          )}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"手机号\" required>\n          {getFieldDecorator('mobileNumber', {\n            rules: [\n              { required: true, message: '请输入手机号' },\n              {\n                pattern: MOBILE_PHONE,\n                message: '请输入正确的手机号!',\n              },\n            ],\n          })(\n            <Input\n              placeholder=\"输入手机号，支持短信验证码登录\"\n              maxLength={11}\n            />,\n          )}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"部门\">\n          {getFieldDecorator('departmentNames')(\n            <MutiSelectWithEditableOptions {...departmentProps} />,\n          )}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"岗位\">\n          {getFieldDecorator('postNames')(\n            <MutiSelectWithEditableOptions {...positionProps} />,\n          )}\n        </FormItem>\n      </Form>\n    );\n  }\n  public render() {\n    const { visible, formValue } = this.props;\n    const modalProps = {\n      title: formValue.get('utmsUsersId') ? '修改员工' : '新增员工',\n      visible,\n      centered: true,\n      maskClosable: false,\n      onOk: this.handleSubmit,\n      onCancel: this.handleClose,\n    };\n    return <Modal {...modalProps}>{this.renderEditor()}</Modal>;\n  }\n}\nconst EditStaffModal = Form.create({\n  mapPropsToFields(props: any) {\n    const params = {};\n    const formObj = props.formValue.toObject();\n    if (formObj.organizationCode) {\n      Object.keys(formObj).map(key => {\n        params[key] = Form.createFormField({\n          value: formObj[key],\n        });\n      });\n    } else if (props.selectedNode) {\n      params.organizationCode = Form.createFormField({\n        value: props.selectedNode,\n      });\n    }\n    return { ...params };\n  },\n})(EditStaff);\nexport default EditStaffModal;\n","/**\n * CompanyStaff selectors\n * @author HuangSiFei\n * @date 2018-9-19 17:33:32\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nconst authData = state => state.get('authorization');\n// const accountInfo = state => state.get('accountInfo');\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeSelectCompanyTree = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('companyTree'),\n  );\n\nexport const makeSelectStaffList = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('staffList'),\n  );\n\nexport const makeSelectCompany = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('selectedCompany'),\n  );\n\nexport const makePickStaff = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('pickStaff'),\n  );\n\nexport const makeSelectDepartment = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('departmentList'),\n  );\n\nexport const makeSelectPosition = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('positionList'),\n  );\n\n// export const makeSelectUserData = selectState =>\n//   createSelector(authData, (state: Map<string, any>) => state.get('userData'));\n\nexport const makeSelectAccountInfo = selectState =>\n  createSelector(authData, (state: Map<string, any>) =>\n    state.get('accountInfo'),\n  );\n\nexport const makeSelectDataCount = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('dataCount'),\n  );\n","/**\n * CompanyStaff Component\n * @author HuangSiFei\n * @date 2018-9-19 17:33:32\n */\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport CheckBox from 'antd/es/checkbox';\nimport Col from 'antd/es/col';\nimport Divider from 'antd/es/divider';\nimport Dropdown from 'antd/es/dropdown';\nimport Form from 'antd/es/form';\nimport { WrappedFormUtils } from 'antd/es/form/Form';\nimport Input from 'antd/es/input';\nimport Layout from 'antd/es/layout';\nimport Menu from 'antd/es/menu';\nimport message from 'antd/es/message';\nimport Modal from 'antd/es/modal';\nimport Popconfirm from 'antd/es/popconfirm';\nimport Row from 'antd/es/row';\nimport Select from 'antd/es/select';\nimport MyTable from 'components/MyTable';\nimport { OptionButtons } from 'components/OptionButtons';\nimport {\n  PageBottom,\n  PageBottomButtons,\n  PageBottomCheck,\n} from 'components/PageBottom';\nimport SiderCompanyTree from 'components/SiderCompanyTree';\nimport StaffAuthorizationSettingModal from 'components/StaffAuthorizationSettingModal';\nimport { fromJS, List, Map } from 'immutable';\nimport * as React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport GLOBAL from 'utils/GLOBAL';\nimport EditStaffModal from './components/EditStaffModal';\n\nimport {\n  makePickStaff,\n  makeSelectAccountInfo,\n  makeSelectCompanyTree,\n  makeSelectDataCount,\n  makeSelectDepartment,\n  makeSelectError,\n  makeSelectLoading,\n  makeSelectPosition,\n  makeSelectStaffList,\n  // makeSelectUserData,\n} from './selectors';\n\nimport {\n  addUser,\n  updateUser,\n  updateUserPwd,\n  updateUserStatus,\n} from './service';\n\nimport './index.less';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\nconst { Item: FormItem } = Form;\nconst { Option } = Select;\nconst { Item: MenuItem } = Menu;\nconst confirm = Modal.confirm;\n\nexport interface ICompanyStaffProps {\n  children: React.ReactChildren;\n  form: WrappedFormUtils;\n  companyTree: List<Map<string, any>>;\n  dataCount: number;\n  staffList: List<Map<string, any>>;\n  pickStaff: Map<string, any>;\n  loading: boolean;\n  // userData: Map<string, any>;\n  permissions: List<Map<string, any>>;\n  accountInfo: Map<string, any>;\n  getCompanyTree: () => any;\n  getStaffList: (options?: object) => any;\n  onAllCheckChanged: (checked: boolean) => void;\n  onCheckedChanged: (record: any) => void;\n  getStaffDetails: (userName: string) => void;\n  resetStaffDetails: () => any;\n}\n\ninterface ICompanyStaffState {\n  openModal: boolean;\n  openAuthModal: boolean;\n  authStaff: List<any>;\n  skipCount: number;\n  pageSize: number;\n  current: number;\n  selectedKeys: List<any>;\n  selectedNode: string;\n}\n\n@Form.create()\nclass CompanyStaff extends React.PureComponent<\n  ICompanyStaffProps,\n  ICompanyStaffState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openModal: false,\n      openAuthModal: false,\n      authStaff: List(),\n      skipCount: 0,\n      pageSize: 15,\n      current: 1,\n      selectedKeys: List(),\n      selectedNode: '',\n    };\n  }\n  public paginationChange = params => {\n    const { skipCount, pageSize, current } = params;\n    this.setState({\n      skipCount,\n      pageSize,\n      current,\n    });\n    this.doSearch(params);\n  };\n  public doSearch = (params?: any) => {\n    const { form, companyTree } = this.props;\n    const { getFieldsValue } = form;\n    const paramObj = Object.assign(\n      {\n        organizationCode:\n          this.state.selectedNode || companyTree.get(0).get('organizationCode'),\n        status: getFieldsValue().status,\n        keywords: getFieldsValue().keywords,\n        pageSize: this.state.pageSize,\n        skipCount: this.state.skipCount,\n      },\n      params,\n    );\n    paramObj.keywords = paramObj.keywords ? paramObj.keywords.trim() : '';\n    this.props.getStaffList(paramObj);\n  };\n  public onChangeStatus = value => {\n    this.setState({\n      current: 1,\n    });\n    this.doSearch({\n      skipCount: 0,\n      status: value,\n    });\n  };\n  public componentDidMount() {\n    this.props.getCompanyTree();\n  }\n\n  public handleSelect = selected => {\n    this.setState({\n      selectedKeys: List([selected.get('utmsOrganizationId') + '']),\n      selectedNode: selected.get('organizationCode'),\n      current: 1,\n    });\n    this.doSearch({\n      skipCount: 0,\n      organizationCode: selected.get('organizationCode'),\n    });\n  };\n  public handleSubmit = e => {\n    e.preventDefault();\n    const { selectedNode } = this.state;\n    if (selectedNode) {\n      this.doSearch({\n        organizationCode: selectedNode,\n        skipCount: 0,\n      });\n    } else {\n      this.doSearch({\n        skipCount: 0,\n      });\n    }\n  };\n  public handleReset = () => {\n    this.props.form.resetFields();\n    const { companyTree } = this.props;\n    this.setState({\n      selectedKeys: List([companyTree.get(0).get('utmsOrganizationId') + '']),\n      selectedNode: companyTree.get(0).get('organizationCode'),\n    });\n    this.doSearch({\n      organizationCode: this.props.companyTree.get(0).get('organizationCode'),\n    });\n  };\n\n  public handleOpenModal = (staff?, item?) => {\n    if (staff) {\n      this.props.getStaffDetails(staff.userName);\n    } else {\n      this.props.resetStaffDetails();\n    }\n    this.setState({\n      openModal: true,\n    });\n  };\n  public handleCloseModal = () => {\n    this.setState({\n      openModal: false,\n    });\n  };\n  public handleEditStaff = async values => {\n    const { companyTree } = this.props;\n    let selectedKey = '';\n    companyTree.map(company => {\n      if (company.get('organizationCode') === values.organizationCode) {\n        selectedKey = company.get('utmsOrganizationId') + '';\n      }\n    });\n    if (values.utmsUsersId) {\n      const result = await updateUser(values);\n      if (result.result === 'success') {\n        message.success('修改员工成功');\n        this.setState({\n          openModal: false,\n          selectedKeys: List([selectedKey]),\n          selectedNode: values.organizationCode,\n        });\n        this.doSearch({ organizationCode: values.organizationCode });\n      } else {\n        message.error('修改员工失败');\n      }\n    } else {\n      const result = await addUser(values);\n      if (result.result === 'success') {\n        Modal.info({\n          title: '员工创建成功',\n          content: `用户名:${\n            values.userName\n          }，密码123456，请登录系统更改密码。`,\n        });\n        this.setState({\n          openModal: false,\n          selectedKeys: List([selectedKey]),\n          selectedNode: values.organizationCode,\n        });\n        this.doSearch({ organizationCode: values.organizationCode });\n      } else {\n        message.error('新增员工失败');\n      }\n    }\n  };\n\n  public showToggleStatus = record => {\n    confirm({\n      title: '',\n      content: `禁用后, ${record.realName} 将被限制登录，是否继续？`,\n      onOk: () => this.confirmStatus(record),\n    });\n  };\n\n  public showResetPwd = record => {\n    confirm({\n      title: '',\n      content: `你确定要重置 ${record.realName} 的密码？`,\n      onOk: () => this.confirmReset(record),\n    });\n  };\n\n  // public renderMoreBtn = (record, permissionArray) => {\n  //   const menu = (\n  //     <Menu>\n  //       {permissionArray.map(item => {\n  //         if (item === 'status') {\n  //           return (\n  //             <MenuItem key={'status'}>\n  //               {/* <Popconfirm\n  //                 title={popConfirmMsg}\n  //                 onConfirm={() => this.confirmStatus(record)}\n  //               >\n  //                 <a>{popConfirmBtn}</a>\n  //               </Popconfirm> */}\n  //               <a onClick={() => this.showToggleStatus(record)}>禁用</a>\n  //             </MenuItem>\n  //           );\n  //         }\n  //         if (item === 'reset') {\n  //           return (\n  //             <MenuItem key={'reset'}>\n  //               {/* <Popconfirm\n  //                 title=\"你确定要重制密码？\"\n  //                 onConfirm={() => this.confirmReset(record)}\n  //               >\n  //                 <a>重置</a>\n  //               </Popconfirm> */}\n  //               <a onClick={() => this.showResetPwd(record)}>重置</a>\n  //             </MenuItem>\n  //           );\n  //         }\n  //         if (item === 'auth') {\n  //           return (\n  //             <MenuItem key={'auth'}>\n  //               <a onClick={() => this.showAuthModal(record)}>权限</a>\n  //             </MenuItem>\n  //           );\n  //         }\n  //       })}\n  //     </Menu>\n  //   );\n  //   return (\n  //     <React.Fragment>\n  //       <Dropdown overlay={menu}>\n  //         <a>更多</a>\n  //       </Dropdown>\n  //     </React.Fragment>\n  //   );\n  // };\n\n  confirmStatus = async record => {\n    const params = {\n      utmsUsersId: record.utmsUsersId,\n      status: record.status === 9 ? 1 : 9,\n    };\n    const result = await updateUserStatus(params);\n    if (result.result === 'success') {\n      message.success('修改状态成功');\n      this.doSearch();\n    }\n  };\n\n  confirmReset = async record => {\n    const url = this.props.accountInfo.get('domainName');\n    const params = {\n      utmsUsersId: record.utmsUsersId,\n      userName: record.userName,\n      operateType: 'RESET',\n    };\n    const result = await updateUserPwd(params);\n    if (result.result === 'success') {\n      Modal.info({\n        title: '密码重置成功',\n        content: '密码已重置，新密码为：' + url + '123456',\n      });\n    }\n  };\n\n  public renderSearchParams = () => {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form\n        className={styles.StaffList__Form}\n        layout=\"inline\"\n        onSubmit={this.handleSubmit}\n      >\n        <Row type=\"flex\">\n          <Col span={20}>\n            <FormItem label=\"状态\">\n              {getFieldDecorator('status', { initialValue: '1' })(\n                <Select\n                  className={styles.StaffList__SelectAction}\n                  onSelect={this.onChangeStatus}\n                >\n                  <Option value=\"1\">生效中</Option>\n                  <Option value=\"9\">已作废</Option>\n                  <Option value=\"\">全部</Option>\n                </Select>,\n              )}\n            </FormItem>\n            <FormItem label=\"关键词搜索\">\n              {getFieldDecorator('keywords')(\n                <Input\n                  placeholder=\"请输入用户名/姓名/手机号\"\n                  style={{ width: '180px' }}\n                />,\n              )}\n            </FormItem>\n            <FormItem className={styles.StaffList__FormAction}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                查 询\n              </Button>\n              <Button onClick={this.handleReset}>重 置</Button>\n            </FormItem>\n          </Col>\n          <Col span={4} className={styles.StaffList__RightAction}>\n            <Button type=\"primary\" onClick={() => this.handleOpenModal()}>\n              新增员工\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  };\n\n  public renderStaffOperation = (\n    item,\n    record,\n    permissionArray,\n    dividerShow,\n    moreBtn,\n  ) => {\n    return (\n      <React.Fragment>\n        <OptionButtons>\n          {[\n            permissionArray.includes('edit') && (\n              <a\n                href=\"javascript:;\"\n                onClick={() => this.handleOpenModal(record, item)}\n              >\n                修改\n                {record.isChecked}\n              </a>\n            ),\n            ...moreBtn.map(h => {\n              if (h === 'status') {\n                return (\n                  <a onClick={() => this.showToggleStatus(record)}>禁用</a>\n                );\n              }\n              if (h === 'reset') {\n                return <a onClick={() => this.showResetPwd(record)}>重置</a>;\n              }\n              if (h === 'auth') {\n                return <a onClick={() => this.showAuthModal(record)}>权限</a>;\n              }\n            }),\n          ]}\n        </OptionButtons>\n        {/* {dividerShow ? <Divider type=\"vertical\" /> : ''} */}\n        {/* {moreBtn.length > 0 ? this.renderMoreBtn(record, moreBtn) : ''} */}\n      </React.Fragment>\n    );\n  };\n\n  public renderTable() {\n    const {\n      dataCount,\n      staffList,\n      loading,\n      onAllCheckChanged,\n      permissions,\n      accountInfo,\n    } = this.props;\n    const versionsCode = accountInfo.get('versionsCode');\n    const permissionArray = [];\n    permissions.toArray().map(cur => {\n      return permissionArray.push(cur.get('operateKey'));\n    });\n    const moreBtn = permissionArray.filter(permission => permission !== 'edit');\n    const dividerShow = permissionArray.includes('edit') && moreBtn.length > 0;\n    const { current } = this.state;\n    const { openAuthModal, authStaff } = this.state;\n    const staffArray = staffList.map(item => item.toObject()).toArray();\n    const tableProps = {\n      columns: [\n        {\n          width: 40,\n          key: 'checkbox',\n          render: (record: any) => {\n            if (permissionArray.includes('auth') && record.status === 1) {\n              return (\n                <CheckBox\n                  checked={record.isChecked}\n                  onChange={() => this.props.onCheckedChanged(record)}\n                />\n              );\n            }\n          },\n        },\n        {\n          title: '用户名',\n          dataIndex: 'userName',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '姓名',\n          dataIndex: 'realName',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '手机号',\n          dataIndex: 'mobileNumber',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '部门',\n          dataIndex: 'departmentNames',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '岗位',\n          dataIndex: 'postNames',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '操作',\n          key: 'action',\n          dataIndex: 'action',\n          render: (item, record) => (\n            <React.Fragment>\n              {record.status === 1 ? (\n                this.renderStaffOperation(\n                  item,\n                  record,\n                  permissionArray,\n                  dividerShow,\n                  moreBtn,\n                )\n              ) : (\n                <Popconfirm\n                  title=\"确认要启用该员工？\"\n                  onConfirm={() => this.confirmStatus(record)}\n                >\n                  <a href=\"javascript:;\">启用</a>\n                </Popconfirm>\n              )}\n            </React.Fragment>\n          ),\n        },\n      ],\n      dataSource: staffList\n        .map(d => ({\n          userName: d.get('userName'),\n          realName: d.get('realName'),\n          mobileNumber: d.get('mobileNumber'),\n          departmentNames: d.get('departmentNames'),\n          postNames: d.get('postNames'),\n          isChecked: d.get('isChecked'),\n          utmsUsersId: d.get('utmsUsersId'),\n          status: d.get('status'),\n        }))\n        .toArray(),\n      loading,\n      pagination: {\n        current,\n        total: dataCount,\n        onChange: this.paginationChange,\n        onShowSizeChange: this.paginationChange,\n      },\n      rowKey: 'userName',\n    };\n    const checkItemLength = staffArray.filter(item => item.isChecked).length;\n    const enableItemLength = staffArray.filter(item => item.status === 1)\n      .length;\n    const batchAuthDisable = checkItemLength < 1;\n\n    return (\n      <React.Fragment>\n        <MyTable {...tableProps} />\n        {permissionArray.includes('auth') ? (\n          <PageBottom\n            leftChild={\n              <PageBottomCheck\n                total={enableItemLength}\n                checked={checkItemLength}\n                onAllCheckChanged={onAllCheckChanged}\n              />\n            }\n            rightChild={\n              <PageBottomButtons\n                buttons={[\n                  <Button\n                    key=\"auth\"\n                    type=\"primary\"\n                    disabled={batchAuthDisable}\n                    onClick={() => this.showAuthModal()}\n                  >\n                    批量分配权限\n                  </Button>,\n                ]}\n              />\n            }\n          />\n        ) : (\n          ''\n        )}\n\n        <StaffAuthorizationSettingModal\n          versionsCode={versionsCode}\n          visible={openAuthModal}\n          onClose={this.handleCancel}\n          onOk={this.handleCancel}\n          staff={authStaff.toArray()}\n        />\n      </React.Fragment>\n    );\n  }\n\n  public renderContent() {\n    return (\n      <Card>\n        {this.renderSearchParams()}\n        {this.renderTable()}\n      </Card>\n    );\n  }\n\n  public render() {\n    const { companyTree, pickStaff } = this.props;\n    const { selectedKeys, selectedNode } = this.state;\n    const selectedKeysProp =\n      selectedKeys.size > 0\n        ? selectedKeys\n        : companyTree.get(0)\n          ? List([companyTree.get(0).get('utmsOrganizationId') + ''])\n          : List();\n    const selectedNodeProp =\n      selectedNode.length > 0\n        ? selectedNode\n        : companyTree.get(0)\n          ? companyTree.get(0).get('organizationCode')\n          : '';\n    return (\n      <React.Fragment>\n        <Layout className={'staffLayout'}>\n          <SiderCompanyTree\n            companyTree={companyTree}\n            handleSelect={this.handleSelect}\n            selectedKeys={selectedKeysProp}\n          />\n          <Layout style={{ background: '#fff' }}>\n            <Content>{this.renderContent()}</Content>\n          </Layout>\n        </Layout>\n        <EditStaffModal\n          formValue={fromJS(pickStaff)}\n          visible={this.state.openModal}\n          onConfirm={this.handleEditStaff}\n          onClose={this.handleCloseModal}\n          refreshDictionary={this.refreshDictionary}\n          companyTree={companyTree}\n          selectedNode={selectedNodeProp}\n        />\n      </React.Fragment>\n    );\n  }\n\n  private hanldUsers = record => {\n    let selectedStaff = List();\n    if (record) {\n      selectedStaff = selectedStaff.push(record);\n    } else {\n      const { staffList } = this.props;\n      selectedStaff = staffList\n        .filter(staff => {\n          return staff.get('isChecked');\n        })\n        .map(staff => {\n          return staff.toObject();\n        });\n    }\n    this.setState({\n      authStaff: selectedStaff,\n    });\n  };\n\n  private showAuthModal = (record?) => {\n    this.hanldUsers(record);\n    this.setState({\n      openAuthModal: true,\n    });\n  };\n\n  private handleCancel = () => {\n    this.setState({\n      openAuthModal: false,\n    });\n  };\n}\n\nexport default ({ routeId, connectModel }) => {\n  return connectModel(actions => {\n    const currentState = state => state.get(routeId);\n    return {\n      mapStateToProps: createStructuredSelector({\n        error: makeSelectError(currentState),\n        loading: makeSelectLoading(currentState),\n        companyTree: makeSelectCompanyTree(currentState),\n        staffList: makeSelectStaffList(currentState),\n        pickStaff: makePickStaff(currentState),\n        // userData: makeSelectUserData(currentState),\n        dataCount: makeSelectDataCount(currentState),\n        accountInfo: makeSelectAccountInfo(currentState),\n      }),\n      mapDispatchToProps: dispatch => ({\n        getCompanyTree: () => dispatch(actions.getCompanyTree()),\n        getStaffList: options => dispatch(actions.getStaffList(options)),\n        onAllCheckChanged: checked =>\n          dispatch(actions.allCheckedChanged(checked)),\n        onCheckedChanged: (record: any) =>\n          dispatch(actions.checkedChanged(record)),\n        getStaffDetails: (record: string) =>\n          dispatch(actions.getStaffDetails(record)),\n        resetStaffDetails: () => dispatch(actions.resetStaffDetails()),\n      }),\n    };\n  })(CompanyStaff);\n};\n"],"sourceRoot":""}