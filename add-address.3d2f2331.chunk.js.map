{"version":3,"sources":["webpack:///./src/modules/module.add.address/index.tsx","webpack:///./src/modules/module.add.address/selectors.ts","webpack:///./src/modules/module.add.address/index.module.less"],"names":["module_add_address_confirm","modal","confirm","FormItem","es_form","Item","Option","es_select","module_add_address_AddAddress","handleSubmit","e","_this$props","_this","props","form","searchParams","addDepotData","editDepotData","dataJs","data","toJS","preventDefault","validateFieldsAndScroll","err","values","customer","customerName","split","utmsDepotId","_objectSpread","length","customerCode","cancelHandle","change","isFieldsTouched","quitHandle","onAddressSelected","result","setFieldsValue","longitude","lng","latitude","lat","province","city","region","react","_this2","this","_this$props2","eventEmitter","refresh","routeIds","goBack","fetchData","on","requestClose","eventSource","setTimeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","includes","return","saveOk","close","_this$props3","getFieldDecorator","loading","_this$props$data$toJS","depotType","depotName","contact","contactWay","address","formItemLayout","labelCol","xs","span","sm","wrapperCol","md","spin","spinning","card","className","index_module_default","a","AddAddress","onSubmit","style","marginTop","_extends","label","initialValue","rules","required","message","CustomerSelect","placeholder","input","maxLength","AddressSelect","onSelected","FormHidden","type","max","pattern","commonRegExp","offset","es_button","htmlType","submitting","marginLeft","onClick","getAsyncData","parseInt","_this3","title","content","okText","cancelText","onCancel","AddAddressForm","create","__webpack_exports__","_ref","routeId","connectModel","actions","selectState","currentState","state","get","mapStateToProps","Object","libfrom_dll_reference_dll","error","selectors_makeSelectError","selectors_makeSelectLoading","selectors_makeSelectSaved","getIn","selectors_makeSelectRouteIds","mapDispatchToProps","dispatch","params","param","saveFields","fields","module","exports"],"mappings":"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","file":"add-address.3d2f2331.chunk.js","sourcesContent":["/**\n * AddAddress Component\n * @author hefan\n * @date 2018/9/18 下午3:32:29\n */\nimport * as React from 'react';\nimport { createStructuredSelector } from 'reselect';\n\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Form from 'antd/es/form';\nimport Input from 'antd/es/input';\nimport Modal from 'antd/es/modal';\nimport Select from 'antd/es/select';\nimport Spin from 'antd/es/spin';\nconst { confirm } = Modal;\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\nimport AddressSelect from 'components/AddressSelect';\n\nimport {\n  makeSelectData,\n  makeSelectError,\n  makeSelectLoading,\n  makeSelectRouteIds,\n  makeSelectSaved,\n} from './selectors';\n\nimport CustomerSelect from 'components/CustomerSelect';\nimport { FIXED_TELEPHONE } from 'utils/commonRegExp.ts';\nimport styles from './index.module.less';\n\nexport interface IAddAddressProps {\n  children: React.ReactChildren;\n  getAsyncData: (params: {}) => any;\n  addDepotData: (param: {}) => void;\n  editDepotData: (param: {}) => void;\n  data: {};\n  searchParams: {};\n  saveOk: boolean;\n  close: () => void;\n  routeIds: [];\n  goBack: () => void;\n  refresh: () => void;\n  eventEmitter: {};\n  saveFields: (fields: {}) => void;\n}\n\nclass AddAddress extends React.PureComponent<IAddAddressProps> {\n  public componentDidMount() {\n    const {\n      searchParams,\n      eventEmitter,\n      refresh,\n      routeIds,\n      goBack,\n    } = this.props;\n\n    if (searchParams && searchParams.utmsDepotId) {\n      this.fetchData();\n    }\n\n    eventEmitter.on('close', (requestClose, eventSource) => {\n      if (\n        eventSource === 'FROM_TAB_CLOSE' ||\n        eventSource === 'FROM_TAB_REFRESH'\n      ) {\n        this.cancelHandle();\n      } else {\n        goBack();\n\n        setTimeout(() => {\n          requestClose();\n        }, 200);\n\n        for (const item of routeIds) {\n          if (item.split('?').includes('/company/addressManage')) {\n            refresh(item);\n            break;\n          }\n        }\n      }\n    });\n  }\n  public componentDidUpdate() {\n    if (this.props.saveOk) {\n      this.props.close();\n    }\n  }\n  public render() {\n    const {\n      form: { getFieldDecorator },\n      loading,\n    } = this.props;\n\n    const {\n      customerName,\n      depotType,\n      depotName, // 地址名称\n      contact, // 联系人\n      contactWay, // 联系方式\n      province,\n      city,\n      region,\n      address,\n      longitude,\n      latitude,\n    } = this.props.data.toJS();\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 7 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 12 },\n        md: { span: 10 },\n      },\n    };\n    const submitFormLayout = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 10, offset: 7 },\n      },\n    };\n\n    return (\n      <Spin spinning={loading}>\n        <Card className={styles.AddAddress}>\n          <Form onSubmit={this.handleSubmit} style={{ marginTop: 8 }}>\n            <FormItem {...formItemLayout} label=\"客户\">\n              {getFieldDecorator('customerName', {\n                initialValue: customerName,\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择客户',\n                  },\n                ],\n              })(<CustomerSelect />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"地址类型\">\n              {getFieldDecorator('depotType', {\n                initialValue: depotType,\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择地址类型',\n                  },\n                ],\n              })(\n                <Select placeholder=\"请选择地址类型\">\n                  <Option value=\"store\">仓库</Option>\n                  <Option value=\"site\">网点/门店</Option>\n                </Select>,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"地址名称\">\n              {getFieldDecorator('depotName', {\n                initialValue: depotName,\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入地址名称',\n                  },\n                ],\n              })(<Input placeholder=\"请输入地址名称\" maxLength={50} />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"详细地址\">\n              {getFieldDecorator('address', {\n                initialValue: address,\n                rules: [\n                  {\n                    required: true,\n                    message: '请选择详细地址',\n                  },\n                ],\n              })(\n                <AddressSelect\n                  placeholder=\"请输入收货地址\"\n                  onSelected={this.onAddressSelected}\n                />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} className={styles.FormHidden}>\n              {getFieldDecorator('longitude', {\n                initialValue: longitude,\n              })(<Input type=\"hidden\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} className={styles.FormHidden}>\n              {getFieldDecorator('latitude', {\n                initialValue: latitude,\n              })(<Input type=\"hidden\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} className={styles.FormHidden}>\n              {getFieldDecorator('province', {\n                initialValue: province,\n              })(<Input type=\"hidden\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} className={styles.FormHidden}>\n              {getFieldDecorator('city', {\n                initialValue: city,\n              })(<Input type=\"hidden\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} className={styles.FormHidden}>\n              {getFieldDecorator('region', {\n                initialValue: region,\n              })(<Input type=\"hidden\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"联系人\">\n              {getFieldDecorator('contact', {\n                initialValue: contact,\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入联系人姓名',\n                    max: 20,\n                  },\n                ],\n              })(<Input placeholder=\"请输入联系人姓名\" maxLength={20} />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"联系电话\">\n              {getFieldDecorator('contactWay', {\n                initialValue: contactWay,\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入联系电话',\n                    pattern: FIXED_TELEPHONE,\n                  },\n                ],\n              })(<Input placeholder=\"请输入联系电话\" maxLength={20} />)}\n            </FormItem>\n            <FormItem {...submitFormLayout} style={{ marginTop: 32 }}>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                loading={this.submitting}\n              >\n                保存\n              </Button>\n              <Button style={{ marginLeft: 8 }} onClick={this.cancelHandle}>\n                取消\n              </Button>\n            </FormItem>\n          </Form>\n        </Card>\n      </Spin>\n    );\n  }\n  private fetchData() {\n    const {\n      searchParams: { utmsDepotId },\n    } = this.props;\n    this.props.getAsyncData({\n      utmsDepotId: parseInt(utmsDepotId),\n    });\n  }\n  private handleSubmit = e => {\n    const {\n      form,\n      searchParams,\n      addDepotData,\n      editDepotData,\n      data,\n    } = this.props;\n    const dataJs = data.toJS();\n    e.preventDefault();\n    form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        const customer = values.customerName.split(',');\n        if (searchParams && searchParams.utmsDepotId) {\n          // 修改\n          editDepotData({\n            utmsDepotId: dataJs.utmsDepotId,\n            ...values,\n            customerName:\n              customer.length > 1 ? customer[1] : dataJs.customerName,\n            customerCode:\n              customer.length > 1 ? customer[0] : dataJs.customerCode,\n          });\n        } else {\n          // 新增\n          addDepotData({\n            ...values,\n            customerName: customer[1],\n            customerCode: customer[0],\n          });\n        }\n      }\n    });\n  };\n  private cancelHandle = () => {\n    const change = this.props.form.isFieldsTouched();\n    this.quitHandle(change);\n  };\n  private quitHandle(change: boolean) {\n    if (change) {\n      confirm({\n        title: '有未保存的信息',\n        content: <p>如放弃，填写的信息将丢失</p>,\n        okText: '继续填写',\n        cancelText: '放弃',\n        onCancel: () => {\n          this.props.close();\n        },\n      });\n    } else {\n      this.props.close();\n    }\n  }\n  private onAddressSelected = result => {\n    const { setFieldsValue } = this.props.form;\n\n    setFieldsValue({\n      longitude: result ? result.lng : '',\n      latitude: result ? result.lat : '',\n      province: result ? result.province : '',\n      city: result ? result.city : '',\n      region: result ? result.region : '',\n    });\n  };\n}\n\nconst AddAddressForm = Form.create()(AddAddress);\n\nexport default ({ routeId, connectModel }) => {\n  return connectModel(actions => {\n    const currentState = state => state.get(routeId);\n    const globalState = state => state.get('global');\n\n    return {\n      mapStateToProps: createStructuredSelector({\n        data: makeSelectData(currentState),\n        error: makeSelectError(currentState),\n        loading: makeSelectLoading(currentState),\n        saveOk: makeSelectSaved(currentState),\n        routeIds: makeSelectRouteIds(globalState),\n      }),\n      mapDispatchToProps: dispatch => ({\n        getAsyncData: params => dispatch(actions.getAsyncData(params)),\n        addDepotData: param => dispatch(actions.addDepotData(param)),\n        editDepotData: param => dispatch(actions.editDepotData(param)),\n        goBack: () => dispatch(actions.goBack()),\n        saveFields: fields => dispatch(actions.saveFields(fields)),\n      }),\n    };\n  })(AddAddressForm);\n};\n","/**\n * AddAddress selectors\n * @author hefan\n * @date 2018/9/18 下午3:32:29\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeSelectData = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('data'));\n\nexport const makeSelectSaved = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('saveOk'));\n\nexport const makeSelectRouteIds = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.getIn(['route', 'routeIds']),\n  );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddAddress\":\"_1QpFl\",\"FormHidden\":\"_2VIet\"};"],"sourceRoot":""}