{"version":3,"sources":["webpack:///./src/modules/module.ltl.order.edit/index.module.less","webpack:///./src/components/DateTimePicker/DateTimePicker.tsx","webpack:///./src/components/FormEditCard/FormEditCard.tsx","webpack:///./src/modules/module.ltl.order.edit/components/CustomerSelect.tsx","webpack:///./src/modules/module.ltl.order.edit/index.tsx","webpack:///./src/modules/module.ltl.order.edit/selectors.ts","webpack:///./src/components/FormEditCard/index.module.less"],"names":["module","exports","LtlOrderEdit","components_DateTimePicker_DateTimePicker","onChange","value","_this","props","format","react","_this$props","this","placeholder","dateValue","momentfrom_dll_reference_dll_default","className","index_module_default","a","DateTimePicker","date_picker","showTime","components_FormEditCard_FormEditCard","FormEditCard_index_module_default","FormEditCard","card","title","bordered","style","width","children","formLayoutCols3","lg","span","md","xs","formItemLayout","labelCol","wrapperCol","Option","es_select","CustomerSelect_CustomerSelect","_React$PureComponent","CustomerSelect","CustomerSelect_classCallCheck","CustomerSelect_getPrototypeOf","call","setDefaultValue","setCustomers","state","options","bind","CustomerSelect_assertThisInitialized","CustomerSelect_inherits","key","nextProps","_this2","customers","renderOptions","setState","prevState","push","name","customerName","code","customerCode","defaultValue","_nextProps$value$spli2","_slicedToArray","split","_this$state","disabled","v","flag","arguments","length","undefined","_v$split2","map","item","index","concat","RadioGroup","es_radio","Group","module_ltl_order_edit_LtlOrderEdit","repeatSubmit","handleSubmit","e","preventDefault","searchParams","data","form","validateFields","err","values","handleRepeatSubmit","param","_objectSpread","requireDate","id","utmsPartOrderId","updatePartOrder","insertPartOrder","setTimeout","cancel","_this$props2","close","isFieldsTouched","cancleEdit","customerChange","obj","setFieldsValue","onAddressSelected","result","longitude","lng","latitude","lat","province","city","region","cb","modal","confirm","content","okText","cancelText","iconType","centered","onCancel","_this$props3","getAsyncData","getCustomerData","eventEmitter","toList","routeIds","refresh","on","requestClose","eventSource","_this$props4","insert","msg","message","success","back","decodeURIComponent","refreshUrl","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","includes","indexOf","return","getFieldDecorator","_ref","_ref$customerName","_ref$customerCode","_ref$thirdSystemId","thirdSystemId","_ref$requireDate","_ref$contact","contact","_ref$phone","phone","_ref$province","_ref$address","address","_ref$longitude","_ref$latitude","_ref$goodsName","goodsName","_ref$goodsNumber","goodsNumber","_ref$goodsWeight","goodsWeight","_ref$goodsVolume","goodsVolume","_ref$delegateAmount","delegateAmount","_ref$isReceipt","isReceipt","_ref$remark","remark","_this$props5","loading","customer","module_ltl_order_edit_index_module_default","es_form","onSubmit","layout","row","gutter","col","Item","_extends","label","marginBottom","initialValue","rules","required","input","type","maxLength","display","position","top","textAlign","pattern","commonRegExp","paddingBottom","AddressSelect","onSelected","TextArea","min","max","validator","Object","checkString","decimal","PageBottom","rightChild","buttons","es_button","onClick","htmlType","__webpack_exports__","_ref2","routeId","actions","selectState","get","mapStateToProps","libfrom_dll_reference_dll","error","selectors_makeSelectError","selectors_makeSelectLoading","selectors_makeSelectData","selectors_makeSelectInsert","selectors_makeSelectCustomerData","getIn","selectors_makeSelectRouteIds","withConnect","es","dispatch","url","create","redux"],"mappings":"gFACAA,EAAAC,SAAkBC,aAAA,okCC+ClBC,2QA5BEC,SAAW,SAACC,GACNC,EAAKC,MAAMH,WACTC,EACFC,EAAKC,MAAMH,SAASC,EAAMG,OAAO,qBAEjCF,EAAKC,MAAMH,SAAS,+PANCK,EAAA,yDAWlB,IAAAC,EACwBC,KAAKJ,MAA5BK,EADDF,EACCE,YAAaP,EADdK,EACcL,MACfQ,EAAYR,EAAQS,IAAOT,EAAO,oBAAsB,KAE9D,OACEI,EAAA,qBAAKM,UAAWC,EAAAC,EAAOC,gBACrBT,EAAA,cAACU,EAAA,GACCC,UAAYZ,OAAQ,SACpBA,OAAO,mBACPI,YAAaA,EACbP,MAAOQ,EACPT,SAAUO,KAAKP,kFCjBzBiB,EARqB,SAACd,GAAD,OACnBE,EAAA,qBAAKM,UAAWO,EAAAL,EAAOM,cACrBd,EAAA,cAACe,EAAA,GAAKC,MAAOlB,EAAMkB,MAAOC,UAAU,EAAMC,OAASC,MAAO,SACvDrB,EAAMsB,YAOAC,GACXC,IAAMC,KAAM,GACZC,IAAMD,KAAM,IACZE,IAAMF,KAAM,KAeDG,GACXC,UACEF,IAAMF,KAAM,KAEdK,YACEH,IAAMF,KAAM,spCCzChB,IAAMM,EAASC,EAAA,EAAOD,OAUTE,EAAb,SAAAC,GAGE,SAAAC,EAAYnC,GAAO,IAAAD,MAAA,mGAAAqC,CAAAhC,KAAA+B,KACjB/B,MAAAL,MAAAsC,EAAAF,GAAAG,KAAAlC,KAAMJ,oDAHRuC,iBAA2B,EAERxC,EADnByC,cAAwB,EAGtBzC,EAAK0C,OACHC,YAEF3C,EAAKF,SAAWE,EAAKF,SAAS8C,KAAdC,IAAA7C,KALCA,YAHrB,0OAAA8C,CAAAV,EAAoCjC,EAAA,oBAApCiC,OAAAW,IAAA,4BAAAhD,MAAA,SAU4BiD,GAAW,IAAAC,EAAA5C,KACnC,GAAI2C,EAAUE,YACP7C,KAAKoC,aAAc,CACtBpC,KAAKoC,cAAe,EACpB,IAAME,EAAUtC,KAAK8C,cAAcH,EAAUE,WAC7C7C,KAAK+C,SAAS,SAACC,EAAgBpD,GAE7B,OADAoD,EAAUV,QAAQW,KAAKX,GAClBK,EAAUjD,OAeb4C,QAASU,EAAUV,UAdfK,EAAUE,UAAU,IACtBD,EAAKhD,MAAMH,UACTyD,KAAMP,EAAUE,UAAU,GAAGM,aAC7BC,KAAMT,EAAUE,UAAU,GAAGQ,gBAI/BC,aAAcX,EAAUE,UAAU,GAC9BF,EAAUE,UAAU,GAAGM,aACvB,GACJb,QAASU,EAAUV,YAS7B,GAAIK,EAAUjD,QACPM,KAAKmC,gBAAiB,CACzBnC,KAAKmC,iBAAkB,EADE,IAAAoB,EAAAC,EAEJb,EAAUjD,MAAM+D,MAAM,KAFlB,GAElBP,EAFkBK,EAAA,GAAAA,EAAA,GAGzBvD,KAAK+C,UAAWO,aAAcJ,QAzCtCR,IAAA,SAAAhD,MAAA,WA6CW,IAAAgE,EAC2B1D,KAAKqC,MAA/BC,EADDoB,EACCpB,QAASgB,EADVI,EACUJ,aACjB,OACExD,EAAA,cAAC8B,EAAA,GACClC,MAAO4D,EACP7D,SAAUO,KAAKP,SACfkE,SAAU3D,KAAKJ,MAAM+D,UAEpBrB,MArDTI,IAAA,WAAAhD,MAAA,SAyDmBkE,GAAgB,IAAbC,IAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC/B,GAAIF,EAAG,KAAAK,EAAAT,EACgBI,EAAEH,MAAM,KADxB,GACEP,EADFe,EAAA,GACQb,EADRa,EAAA,GAGL,GADAjE,KAAKJ,MAAMH,UAAWyD,OAAME,UACvBS,EACH,OAAOX,EAETlD,KAAK+C,UAAWO,aAAcJ,QAhEpCR,IAAA,gBAAAhD,MAAA,SAmEwBmD,GACpB,OAAIA,EACQA,EAAUqB,IAAI,SAACC,EAAMC,GAC7B,OACEtE,EAAA,cAAC6B,GACCe,IAAKyB,EAAKd,aAAee,EACzB1E,MAAK,GAAA2E,OAAKF,EAAKhB,aAAV,KAAAkB,OAA0BF,EAAKd,eAEnCc,EAAKhB,mDA3ElBpB,EAAA,oqCC2BeH,EAAA,EAAOD,OAAtB,IACM2C,GAAaC,EAAA,EAAMC,MAsBnBC,4QACJC,cAAe,IACfC,aAAe,SAACC,GACdA,EAAEC,iBADoD,IAAA9E,EAEvBJ,EAAKC,MAA5BkF,EAF8C/E,EAE9C+E,aAAcC,EAFgChF,EAEhCgF,KACtBpF,EAAKC,MAAMoF,KAAKC,eAAe,SAACC,EAAKC,GACnC,IAAKD,IAAQvF,EAAK+E,aAAc,CAC9B/E,EAAKyF,qBACL,IAAMC,qUAAKC,IAAQH,GAOnB,GANIE,EAAME,cACRF,EAAME,YACJF,EAAME,YAAYxB,OAAS,GACvBsB,EAAME,YACNF,EAAME,YAAc,OAExBT,GAAgBA,EAAaU,GAE/B,OADAH,EAAMI,gBAAkBV,EAAKU,gBACtB9F,EAAKC,MAAM8F,gBAAgBL,GAEpC1F,EAAKC,MAAM+F,gBAAgBN,SAIjCD,mBAAqB,WACnBzF,EAAK+E,cAAgB/E,EAAK+E,aAC1BkB,WAAW,WACTjG,EAAK+E,cAAgB/E,EAAK+E,cACzB,QAELmB,OAAS,SAACjB,GAAwC,IAAAkB,EACxBnG,EAAKC,MAArBmG,EADwCD,EACxCC,MADwCD,EACjCd,KACNgB,kBACPrG,EAAKsG,WAAWF,GAEhBA,OAGJG,eAAiB,SAAAC,IAEfC,EAD2BzG,EAAKC,MAAMoF,KAA9BoB,iBAEN/C,aAAc8C,EAAI/C,KAClBD,aAAcgD,EAAIjD,UAGtBmD,kBAAoB,SAAAC,IAElBF,EAD2BzG,EAAKC,MAAMoF,KAA9BoB,iBAENG,UAAWD,EAASA,EAAOE,IAAM,GACjCC,SAAUH,EAASA,EAAOI,IAAM,GAChCC,SAAUL,EAASA,EAAOK,SAAWL,EAAOM,KAAON,EAAOO,OAAS,QAGvEZ,WAAa,SAAAa,GACMnH,EAAKC,MAAdoF,KACR+B,EAAA,EAAMC,SACJlG,MAAO,6CACPmG,QAAS,2EACTC,OAAQ,2BACRC,WAAY,eACZC,SAAU,cACVC,UAAU,EACVC,SAPY,WAQNR,GACFA,kQA/DiBhH,EAAA,oEAoEL,IAAA8C,EAAA5C,KAAAuH,EAUdvH,KAAKJ,MARPkF,EAFgByC,EAEhBzC,aACA0C,EAHgBD,EAGhBC,aACAC,EAJgBF,EAIhBE,gBAIAC,GARgBH,EAKhBI,OALgBJ,EAMhBK,SANgBL,EAOhBM,QAPgBN,EAQhBG,cACA1C,EATgBuC,EAShBvC,KAEFyC,IACI3C,GAAgBA,EAAaU,IAC/BgC,GAAe/B,gBAAiBX,EAAaU,KAE/CkC,EAAaI,GAAG,QAAS,SAACC,EAAcC,GAEnB,mBAAhBA,GACiB,qBAAhBA,IACFhD,EAAKgB,kBAIL+B,IAFAnF,EAAKqD,WAAW8B,kDAMD,IAAAE,EACuCjI,KAAKJ,MAAvDsI,EADWD,EACXC,OAAQpD,EADGmD,EACHnD,aAAciB,EADXkC,EACWlC,MAAO4B,EADlBM,EACkBN,OAAQC,EAD1BK,EAC0BL,SAC7C,GAAIM,GAA4B,YAAlBA,EAAO5B,OAAsB,CACzC,IAAI6B,EAAM,2BACNrD,GAAgBA,EAAaU,KAC/B2C,EAAM,4BAERC,EAAA,EAAQC,QAAQF,GAChBpC,IACA,IAAIuC,EAAO,GACPxD,GAAgBA,EAAaU,KAC/B8C,EAAOxD,EAAawD,KAAOC,mBAAmBzD,EAAawD,MAAQA,GAErE,IAAME,KAXmCC,GAAA,EAAAC,GAAA,EAAAC,OAAA3E,EAAA,IAYzC,QAAA4E,EAAAC,EAAmBjB,EAAnBkB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6B,KAAlBtE,EAAkByE,EAAAlJ,OAEzByE,EAAKV,MAAM,KAAKyF,SAAS,cACxBZ,GAAQnE,EAAKgF,QAAQb,IAAS,GAC/BnE,EAAKV,MAAM,KAAKyF,SAAhB,uBAAA7E,OAAgDS,EAAaU,OAE7DgD,EAAWvF,KAAKkB,IAlBqB,MAAAe,GAAAwD,GAAA,EAAAC,EAAAzD,EAAA,YAAAuD,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAqBzChB,EAAOW,EAAME,qCAGD,IACNa,EAAsBrJ,KAAKJ,MAAMoF,KAAjCqE,kBADMC,EAoBVtJ,KAAKJ,MAAMmF,SApBDwE,EAAAD,EAGZnG,oBAHY,IAAAoG,EAGG,GAHHA,EAAAC,EAAAF,EAIZjG,oBAJY,IAAAmG,EAIG,GAJHA,EAAAC,EAAAH,EAKZI,qBALY,IAAAD,EAKI,GALJA,EAAAE,EAAAL,EAMZ/D,mBANY,IAAAoE,EAME,GANFA,EAAAC,EAAAN,EAOZO,eAPY,IAAAD,EAOF,GAPEA,EAAAE,EAAAR,EAQZS,aARY,IAAAD,EAQJ,GARIA,EAAAE,EAAAV,EASZ3C,gBATY,IAAAqD,EASD,GATCA,EAAAC,EAAAX,EAUZY,eAVY,IAAAD,EAUF,GAVEA,EAAAE,EAAAb,EAWZ/C,iBAXY,IAAA4D,EAWA,GAXAA,EAAAC,EAAAd,EAYZ7C,gBAZY,IAAA2D,EAYD,GAZCA,EAAAC,EAAAf,EAaZgB,iBAbY,IAAAD,EAaA,GAbAA,EAAAE,EAAAjB,EAcZkB,mBAdY,IAAAD,EAcE,GAdFA,EAAAE,EAAAnB,EAeZoB,mBAfY,IAAAD,EAeE,GAfFA,EAAAE,EAAArB,EAgBZsB,mBAhBY,IAAAD,EAgBE,GAhBFA,EAAAE,EAAAvB,EAiBZwB,sBAjBY,IAAAD,EAiBK,GAjBLA,EAAAE,EAAAzB,EAkBZ0B,iBAlBY,IAAAD,KAAAE,EAAA3B,EAmBZ4B,eAnBY,IAAAD,EAmBH,GAnBGA,EAAAE,GAqBoBnL,KAAKJ,MAA/BwL,GArBMD,GAqBNC,QAAStG,GArBHqG,GAqBGrG,aACXuG,GACJlI,GAAgBE,EAAhB,GAAAgB,OAAkClB,EAAlC,KAAAkB,OAAkDhB,GAAiB,GACrE,OACEvD,EAAA,qBAAKM,UAAWkL,EAAAhL,EAAOf,cACrBO,EAAA,cAACyL,EAAA,GAAKC,SAAUxL,KAAK2E,aAAc8G,OAAO,YACxC3L,EAAA,cAACY,GAAaI,MAAM,4BAClBhB,EAAA,cAAC4L,EAAA,GAAIC,OFpKK,IEqKR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJuK,MAAM,eACN/K,OAASgL,aAAc,KAEvBlM,EAAA,cAAC+B,GACCnC,MAAO2L,GACP5L,SAAUO,KAAKkG,eACfrD,UAAW7C,KAAKJ,MAAMiD,UACtBc,YAAUmB,KAAgBA,GAAaU,MAExC6D,EAAkB,gBACjB4C,aAAc9I,EACd+I,QAEIC,UAAU,EACV/D,QAAS,oCALdiB,CAQEvJ,EAAA,cAACsM,EAAA,GAAMC,KAAK,aAEjBvM,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBR,OAASgL,aAAc,KACnD3C,EAAkB,gBACjB4C,aAAc5I,GADfgG,CAEEvJ,EAAA,cAACsM,EAAA,GAAMC,KAAK,cAGnBvM,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,yCAClC1C,EAAkB,iBACjB4C,aAAcvC,GADfL,CAEEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,yDAK3CH,EAAA,cAAC4L,EAAA,GAAIC,OF1MK,IE2MR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,yCAClC1C,EAAkB,eACjB4C,aAAc1G,GADf8D,CAEEvJ,EAAA,cAACN,GAAeS,YAAY,uCAKrCH,EAAA,cAAC4L,EAAA,GAAIC,OFpNK,IEqNR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,uBACnCjM,EAAA,cAAC8L,EAAA,GAAIvK,KAAM,IACRgI,EAAkB,WACjB4C,aAAcpC,EACdqC,QAEIC,UAAU,EACV/D,QAAS,sDALdiB,CAQEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,qCAEvCH,EAAA,cAAC8L,EAAA,GAAIvK,KAAM,GACTvB,EAAA,sBACEkB,OACEuL,QAAS,eACTC,SAAU,WACVvL,MAAO,OACPwL,IAAK,MACLC,UAAW,WANf,OAYF5M,EAAA,cAAC8L,EAAA,GAAIvK,KAAM,IACTvB,EAAA,cAACyL,EAAA,EAAKM,KAAN,KACGxC,EAAkB,SACjB4C,aAAclC,EACdmC,QAEIC,UAAU,EACV/D,QAAS,+CAGTuE,QAASC,EAAA,EACTxE,QAAS,kEATdiB,CAYEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,oDAK7CH,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJuK,MAAM,2BACN/K,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,WACjB4C,aAAc/B,EACdgC,QAEIC,UAAU,EACV/D,QAAS,gDALdiB,CASCvJ,EAAA,cAACgN,EAAA,GACC7M,YAAY,6CACZ8M,WAAY/M,KAAKqG,sBAIvBvG,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJR,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,aACjB4C,aAAc1F,GADf8C,CAEEvJ,EAAA,cAACsM,EAAA,GAAMC,KAAK,SAASpM,YAAY,iDAEtCH,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJR,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,YACjB4C,aAAcxF,GADf4C,CAEEvJ,EAAA,cAACsM,EAAA,GAAMC,KAAK,SAASpM,YAAY,iDAEtCH,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJR,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,YACjB4C,aAActF,GADf0C,CAEEvJ,EAAA,cAACsM,EAAA,GAAMC,KAAK,eAKrBvM,EAAA,cAAC4L,EAAA,GAAIC,OFlTK,IEmTR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,iBAClC1C,EAAkB,UACjB4C,aAAcf,IADf7B,CAEEvJ,EAAA,cAACkN,EAAA,GAASV,UAAW,IAAKrM,YAAY,sCAG7CH,EAAA,cAAC8L,EAAA,GAAIvK,KAAM,MAIfvB,EAAA,cAACY,GAAaI,MAAM,4BAClBhB,EAAA,cAAC4L,EAAA,GAAIC,OF/TK,IEgUR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,6BAClC1C,EAAkB,aACjB4C,aAAc3B,EACd4B,QAEIC,UAAU,EACV/D,QAAS,+CAGT6E,IAAK,EACLC,IAAK,IACLb,KAAM,SACNjE,QAAS,yCAXdiB,CAcEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,IAAKrM,YAAY,mDAK5CH,EAAA,cAAC4L,EAAA,GAAIC,OFrVK,IEsVR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,yCAClC1C,EAAkB,eACjB4C,aAAcvB,EACdwB,QAEIC,UAAU,EACV/D,QAAS,mCAGT+E,UAAWC,OAAAC,EAAA,EAAAD,CACT,0EAEEF,IAAK,SACLD,IAAK,IACLK,QAAS,OAblBjE,CAkBEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,sCAGzCH,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,mCAClC1C,EAAkB,eACjB4C,aAAcrB,EACdsB,QAEIC,UAAU,EACV/D,QAAS,mCAGT+E,UAAWC,OAAAC,EAAA,EAAAD,CACT,uEAEEF,IAAK,MACLD,IAAK,IACLK,QAAS,OAblBjE,CAkBEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,sCAGzCH,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KAAetK,GAAgBuK,MAAM,mCAClC1C,EAAkB,eACjB4C,aAAczB,EACd0B,QAEIC,UAAU,EACV/D,QAAS,mCAGT+E,UAAWC,OAAAC,EAAA,EAAAD,CACT,qEAEEF,IAAK,IACLD,IAAK,EACLK,QAAS,OAblBjE,CAkBEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,wCAM7CH,EAAA,cAACY,GAAaI,MAAM,4BAClBhB,EAAA,cAAC4L,EAAA,GAAIC,OF/ZK,IEgaR7L,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJuK,MAAM,eACN/K,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,aACjB4C,aAA4B,iBAAdjB,EAAqB,EAAI,GADxC3B,CAGCvJ,EAAA,cAACwE,GAAD,KACExE,EAAA,cAACyE,EAAA,GAAM7E,MAAO,GAAd,UACAI,EAAA,cAACyE,EAAA,GAAM7E,MAAO,GAAd,cAKRI,EAAA,cAAC8L,EAAA,EAAQzK,EACPrB,EAAA,cAACyL,EAAA,EAAKM,KAANC,KACMtK,GACJuK,MAAM,iCACN/K,OAASgL,aAAc,EAAGa,cAAe,KAExCxD,EAAkB,kBACjB4C,aAAcnB,EACdoB,QAEIC,UAAU,EACV/D,QAAS,mCAGT+E,UAAWC,OAAAC,EAAA,EAAAD,CACT,4EAEEF,IAAK,WACLD,IAAK,EACLK,QAAS,OAblBjE,CAkBEvJ,EAAA,cAACsM,EAAA,GAAME,UAAW,GAAIrM,YAAY,wCAM7CH,EAAA,cAACyN,EAAA,GACCC,WACE1N,EAAA,cAACyN,EAAA,GACCE,SACE3N,EAAA,cAAC4N,EAAA,GAAOhL,IAAK,EAAGiL,QAAS3N,KAAK6F,QAA9B,gBAGA/F,EAAA,cAAC4N,EAAA,GACChL,IAAK,EACL2J,KAAK,UACLuB,SAAS,SACTxC,QAASA,IAERtG,IAAgBA,GAAaU,GAAK,eAAO,wEAY9DqI,EAAA,iBAAeC,GAA0B,IAAvBC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,QAUnBC,EAAc,SAAA5L,GAAK,OAAIA,EAAM6L,IAAIH,IAEjCI,EAAkBf,OAAAgB,EAAA,yBAAAhB,EACtBiB,MC/hB2B,SAAAJ,GAAW,OACxCb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAA6BA,EAAM6L,IAAI,WD8hB1DI,CAAgBL,GACvB7C,QC7hB6B,SAAA6C,GAAW,OAC1Cb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAC1BA,EAAM6L,IAAI,aD2hBDK,CAAkBN,GAC3BlJ,KCzhB0B,SAAAkJ,GAAW,OACvCb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAA6BA,EAAM6L,IAAI,UDwhB3DM,CAAeP,GACrB/F,OCphB4B,SAAA+F,GAAW,OACzCb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAA6BA,EAAM6L,IAAI,YDmhBzDO,CAAiBR,GACzBpL,UCzhBkC,SAAAoL,GAAW,OAC/Cb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAC1BA,EAAM6L,IAAI,eDuhBCQ,CAAuBT,GAClCrG,SCphB8B,SAAAqG,GAAW,OAC3Cb,OAAAgB,EAAA,eAAAhB,CAAea,EAAa,SAAC5L,GAAD,OAC1BA,EAAMsM,OAAO,QAAS,eDkhBZC,CAPQ,SAAAvM,GAAK,OAAIA,EAAM6L,IAAI,cAWjCW,EAAczB,OAAA0B,EAAA,QAAA1B,CAClBe,EAtByB,SAAAY,GAAQ,OACjCvH,aAAc,SAACnC,GAAD,OAAiB0J,EAASf,EAAQxG,aAAanC,KAC7DM,gBAAiB,SAACN,GAAD,OAAiB0J,EAASf,EAAQrI,gBAAgBN,KACnEK,gBAAiB,SAACL,GAAD,OAAiB0J,EAASf,EAAQtI,gBAAgBL,KACnEoC,gBAAiB,kBAAMsH,EAASf,EAAQvG,oBACxCE,OAAQ,SAACtC,EAAgB2J,GAAjB,OACND,EAASf,EAAQrG,OAAOtC,EAAO2J,QAoB7BhK,EAAOuG,EAAA,EAAK0D,QAAL1D,CAAc9G,IAE3B,OAAO2I,OAAA8B,EAAA,EAAA9B,CAAQyB,EAARzB,CAAqBpI,0BExjB9B3F,EAAAC,SAAkBsB,aAAA","file":"ltl-order-edit.74e43309.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LtlOrderEdit\":\"-Jw3s\"};","/**\n * DateTimePicker Component\n * @author djd\n * @date 2018/9/12 下午2:41:24\n */\nimport * as React from 'react';\n\nimport DatePicker from 'antd/es/date-picker';\n\nimport styles from './index.module.less';\n\nimport moment, { Moment } from 'moment';\n\ninterface IDateTimePickerProps {\n  value?: string;\n  onChange?: (dateString: string) => void;\n  placeholder: string;\n}\n\nclass DateTimePicker extends React.PureComponent<IDateTimePickerProps, any> {\n  onChange = (value: Moment) => {\n    if (this.props.onChange) {\n      if (value) {\n        this.props.onChange(value.format('YYYY-MM-DD HH:mm'));\n      } else {\n        this.props.onChange('');\n      }\n    }\n  };\n\n  render() {\n    const { placeholder, value } = this.props;\n    const dateValue = value ? moment(value, 'YYYY-MM-DD HH:mm') : null;\n\n    return (\n      <div className={styles.DateTimePicker}>\n        <DatePicker\n          showTime={{ format: 'HH:mm' }}\n          format=\"YYYY-MM-DD HH:mm\"\n          placeholder={placeholder}\n          value={dateValue}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DateTimePicker;\n","/**\n * FormEditCard Component\n * @author djd\n * @date 2018/9/14 下午3:29:18\n */\nimport * as React from 'react';\n\nimport Card from 'antd/es/card';\n\nimport styles from './index.module.less';\n\nexport interface IFormEditCardProps {\n  title: string;\n  children?: React.ReactNode;\n}\n\nconst FormEditCard = (props: IFormEditCardProps) => (\n  <div className={styles.FormEditCard}>\n    <Card title={props.title} bordered={true} style={{ width: '100%' }}>\n      {props.children}\n    </Card>\n  </div>\n);\n\nexport default FormEditCard;\n\nexport const formLayoutCols3 = {\n  lg: { span: 8 },\n  md: { span: 12 },\n  xs: { span: 24 },\n};\n\nexport const formLayoutCols2 = {\n  lg: { span: 12 },\n  md: { span: 12 },\n  xs: { span: 24 },\n};\n\nexport const formLayoutCols1 = {\n  lg: { span: 24 },\n  md: { span: 24 },\n  xs: { span: 24 },\n};\n\nexport const formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n  },\n};\n\nexport const gutter = 16;\n","/**\n * LtlOrderEdit Component\n * @author ggm\n * @date 2018/9/27 下午1:52:15\n */\nimport Select from 'antd/es/select';\nimport * as React from 'react';\n\nconst Option = Select.Option;\nexport interface IProps {\n  children?: React.ReactChildren;\n  value?: any;\n  defaultValue?: any;\n  customers?: any[];\n  disabled?: boolean;\n  onChange?: (value: any) => any;\n}\n\nexport class CustomerSelect extends React.PureComponent<IProps> {\n  setDefaultValue: boolean = false;\n  setCustomers: boolean = false;\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: [],\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.customers) {\n      if (!this.setCustomers) {\n        this.setCustomers = true;\n        const options = this.renderOptions(nextProps.customers);\n        this.setState((prevState: any, props) => {\n          prevState.options.push(options);\n          if (!nextProps.value) {\n            if (nextProps.customers[0]) {\n              this.props.onChange({\n                name: nextProps.customers[0].customerName,\n                code: nextProps.customers[0].customerCode,\n              });\n            }\n            return {\n              defaultValue: nextProps.customers[0]\n                ? nextProps.customers[0].customerName\n                : '',\n              options: prevState.options,\n            };\n          }\n          return {\n            options: prevState.options,\n          };\n        });\n      }\n    }\n    if (nextProps.value) {\n      if (!this.setDefaultValue) {\n        this.setDefaultValue = true;\n        const [name, code] = nextProps.value.split(',');\n        this.setState({ defaultValue: name });\n      }\n    }\n  }\n  render() {\n    const { options, defaultValue } = this.state;\n    return (\n      <Select\n        value={defaultValue}\n        onChange={this.onChange}\n        disabled={this.props.disabled}\n      >\n        {options}\n      </Select>\n    );\n  }\n  private onChange(v, flag = true) {\n    if (v) {\n      const [name, code] = v.split(',');\n      this.props.onChange({ name, code });\n      if (!flag) {\n        return name;\n      }\n      this.setState({ defaultValue: name });\n    }\n  }\n  private renderOptions(customers) {\n    if (customers) {\n      const c = customers.map((item, index) => {\n        return (\n          <Option\n            key={item.customerCode + index}\n            value={`${item.customerName},${item.customerCode}`}\n          >\n            {item.customerName}\n          </Option>\n        );\n      });\n      return c;\n    }\n    return [];\n  }\n}\n","/**\n * LtlOrderEdit Component\n * @author djd\n * @date 2018/9/13 下午1:52:15\n */\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Col from 'antd/es/col';\nimport Form, { FormComponentProps } from 'antd/es/form';\nimport Input from 'antd/es/input';\nimport message from 'antd/es/message';\nimport Modal from 'antd/es/modal';\nimport Radio from 'antd/es/radio';\nimport Row from 'antd/es/row';\nimport Select from 'antd/es/select';\nimport Spin from 'antd/es/spin';\nimport AddressSelect from 'components/AddressSelect';\nimport DateTimePicker from 'components/DateTimePicker';\nimport FormEditCard, {\n  formItemLayout,\n  formLayoutCols3,\n  gutter,\n} from 'components/FormEditCard';\nimport { PageBottom, PageBottomButtons } from 'components/PageBottom';\nimport TextArea from 'components/TextArea';\nimport { CustomerSelect } from './components/CustomerSelect';\n\nimport { checkNumberForm } from 'utils/checkString';\nimport { FIXED_TELEPHONE } from 'utils/commonRegExp';\n\nimport {\n  makeSelectCustomerData,\n  makeSelectData,\n  makeSelectError,\n  makeSelectInsert,\n  makeSelectLoading,\n  makeSelectRouteIds,\n} from './selectors';\n\nimport styles from './index.module.less';\nconst Option = Select.Option;\nconst RadioGroup = Radio.Group;\nexport interface ILtlOrderEditProps extends FormComponentProps {\n  children: React.ReactChildren;\n  data?: any;\n  customers?: any;\n  insert?: any;\n  loading: boolean;\n  routeIds: [];\n  searchParams?: {\n    id: number | string;\n    back?: string;\n  };\n  eventEmitter?: object;\n  close: () => any;\n  refresh: (param?: any) => any;\n  getAsyncData?: (param?: object) => any;\n  getCustomerData?: (param?: object) => any;\n  insertPartOrder: (param: object) => any;\n  updatePartOrder: (param: object) => any;\n  toList: (param?: string, url?: string[]) => any;\n}\n\nclass LtlOrderEdit extends React.PureComponent<ILtlOrderEditProps> {\n  repeatSubmit = false;\n  handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const { searchParams, data } = this.props;\n    this.props.form.validateFields((err, values) => {\n      if (!err && !this.repeatSubmit) {\n        this.handleRepeatSubmit();\n        const param = { ...values };\n        if (param.requireDate) {\n          param.requireDate =\n            param.requireDate.length > 16\n              ? param.requireDate\n              : param.requireDate + ':00';\n        }\n        if (searchParams && searchParams.id) {\n          param.utmsPartOrderId = data.utmsPartOrderId;\n          return this.props.updatePartOrder(param);\n        }\n        this.props.insertPartOrder(param);\n      }\n    });\n  };\n  handleRepeatSubmit = () => {\n    this.repeatSubmit = !this.repeatSubmit;\n    setTimeout(() => {\n      this.repeatSubmit = !this.repeatSubmit;\n    }, 1000);\n  };\n  cancel = (e: React.FormEvent<HTMLFormElement>) => {\n    const { close, form } = this.props;\n    if (form.isFieldsTouched()) {\n      this.cancleEdit(close);\n    } else {\n      close();\n    }\n  };\n  customerChange = obj => {\n    const { setFieldsValue } = this.props.form;\n    setFieldsValue({\n      customerCode: obj.code,\n      customerName: obj.name,\n    });\n  };\n  onAddressSelected = result => {\n    const { setFieldsValue } = this.props.form;\n    setFieldsValue({\n      longitude: result ? result.lng : '',\n      latitude: result ? result.lat : '',\n      province: result ? result.province + result.city + result.region : '',\n    });\n  };\n  cancleEdit = cb => {\n    const { form } = this.props;\n    Modal.confirm({\n      title: '有未保存的信息',\n      content: '如放弃，填写的信息将丢失',\n      okText: '继续填写',\n      cancelText: '放弃',\n      iconType: 'info-circle',\n      centered: true,\n      onCancel() {\n        if (cb) {\n          cb();\n        }\n      },\n    });\n  };\n  componentDidMount() {\n    const {\n      searchParams,\n      getAsyncData,\n      getCustomerData,\n      toList,\n      routeIds,\n      refresh,\n      eventEmitter,\n      form,\n    } = this.props;\n    getCustomerData();\n    if (searchParams && searchParams.id) {\n      getAsyncData({ utmsPartOrderId: searchParams.id });\n    }\n    eventEmitter.on('close', (requestClose, eventSource) => {\n      if (\n        (eventSource === 'FROM_TAB_CLOSE' ||\n          eventSource === 'FROM_TAB_REFRESH') &&\n        form.isFieldsTouched()\n      ) {\n        this.cancleEdit(requestClose);\n      } else {\n        requestClose();\n      }\n    });\n  }\n  componentDidUpdate() {\n    const { insert, searchParams, close, toList, routeIds } = this.props;\n    if (insert && insert.result === 'success') {\n      let msg = '开单成功';\n      if (searchParams && searchParams.id) {\n        msg = '修改成功';\n      }\n      message.success(msg);\n      close();\n      let back = '';\n      if (searchParams && searchParams.id) {\n        back = searchParams.back ? decodeURIComponent(searchParams.back) : back;\n      }\n      const refreshUrl = [];\n      for (const item of routeIds) {\n        if (\n          item.split('?').includes('/ltlOrder') ||\n          (back && item.indexOf(back) >= 0) ||\n          item.split('&').includes(`/ltlOrder/detail?id=${searchParams.id}`)\n        ) {\n          refreshUrl.push(item);\n        }\n      }\n      toList(back, refreshUrl);\n    }\n  }\n  public render() {\n    const { getFieldDecorator } = this.props.form;\n    const {\n      customerName = '',\n      customerCode = '',\n      thirdSystemId = '',\n      requireDate = '',\n      contact = '',\n      phone = '',\n      province = '',\n      address = '',\n      longitude = '',\n      latitude = '',\n      goodsName = '',\n      goodsNumber = '',\n      goodsWeight = '',\n      goodsVolume = '',\n      delegateAmount = '',\n      isReceipt = true,\n      remark = '',\n    } = this.props.data || {};\n    const { loading, searchParams } = this.props;\n    const customer =\n      customerName && customerCode ? `${customerName},${customerCode}` : '';\n    return (\n      <div className={styles.LtlOrderEdit}>\n        <Form onSubmit={this.handleSubmit} layout=\"vertical\">\n          <FormEditCard title=\"基本信息\">\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item\n                  {...formItemLayout}\n                  label=\"客户\"\n                  style={{ marginBottom: 0 }}\n                >\n                  <CustomerSelect\n                    value={customer}\n                    onChange={this.customerChange}\n                    customers={this.props.customers}\n                    disabled={searchParams && searchParams.id ? true : false}\n                  />\n                  {getFieldDecorator('customerName', {\n                    initialValue: customerName,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请选择客户',\n                      },\n                    ],\n                  })(<Input type=\"hidden\" />)}\n                </Form.Item>\n                <Form.Item {...formItemLayout} style={{ marginBottom: 0 }}>\n                  {getFieldDecorator('customerCode', {\n                    initialValue: customerCode,\n                  })(<Input type=\"hidden\" />)}\n                </Form.Item>\n              </Col>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"第三方订单号\">\n                  {getFieldDecorator('thirdSystemId', {\n                    initialValue: thirdSystemId,\n                  })(<Input maxLength={40} placeholder=\"请输入第三方单号\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"要求送达时间\">\n                  {getFieldDecorator('requireDate', {\n                    initialValue: requireDate,\n                  })(<DateTimePicker placeholder=\"请选择时间\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"收货人\">\n                  <Col span={11}>\n                    {getFieldDecorator('contact', {\n                      initialValue: contact,\n                      rules: [\n                        {\n                          required: true,\n                          message: '请输入收货人姓名',\n                        },\n                      ],\n                    })(<Input maxLength={40} placeholder=\"请输入姓名\" />)}\n                  </Col>\n                  <Col span={2}>\n                    <span\n                      style={{\n                        display: 'inline-block',\n                        position: 'relative',\n                        width: '100%',\n                        top: '3px',\n                        textAlign: 'center',\n                      }}\n                    >\n                      --\n                    </span>\n                  </Col>\n                  <Col span={11}>\n                    <Form.Item>\n                      {getFieldDecorator('phone', {\n                        initialValue: phone,\n                        rules: [\n                          {\n                            required: true,\n                            message: '请输入手机号码',\n                          },\n                          {\n                            pattern: FIXED_TELEPHONE,\n                            message: '请输入正确的联系方式',\n                          },\n                        ],\n                      })(<Input maxLength={40} placeholder=\"请输入联系方式\" />)}\n                    </Form.Item>\n                  </Col>\n                </Form.Item>\n              </Col>\n              <Col {...formLayoutCols3}>\n                <Form.Item\n                  {...formItemLayout}\n                  label=\"收货地址\"\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('address', {\n                    initialValue: address,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请输入收货地址',\n                      },\n                    ],\n                  })(\n                    <AddressSelect\n                      placeholder=\"请输入收货地址\"\n                      onSelected={this.onAddressSelected}\n                    />,\n                  )}\n                </Form.Item>\n                <Form.Item\n                  {...formItemLayout}\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('longitude', {\n                    initialValue: longitude,\n                  })(<Input type=\"hidden\" placeholder=\"请在地图上标点\" />)}\n                </Form.Item>\n                <Form.Item\n                  {...formItemLayout}\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('latitude', {\n                    initialValue: latitude,\n                  })(<Input type=\"hidden\" placeholder=\"请在地图上标点\" />)}\n                </Form.Item>\n                <Form.Item\n                  {...formItemLayout}\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('province', {\n                    initialValue: province,\n                  })(<Input type=\"hidden\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"备注\">\n                  {getFieldDecorator('remark', {\n                    initialValue: remark,\n                  })(<TextArea maxLength={500} placeholder=\"请输入备注\" />)}\n                </Form.Item>\n              </Col>\n              <Col span={8} />\n            </Row>\n          </FormEditCard>\n\n          <FormEditCard title=\"货物信息\">\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"货物名称\">\n                  {getFieldDecorator('goodsName', {\n                    initialValue: goodsName,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请输入货物名称',\n                      },\n                      {\n                        min: 2,\n                        max: 200,\n                        type: 'string',\n                        message: '请输入2-200个字',\n                      },\n                    ],\n                  })(<Input maxLength={200} placeholder=\"请输入货物名称\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"重量（千克）\">\n                  {getFieldDecorator('goodsWeight', {\n                    initialValue: goodsWeight,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请输入重量',\n                      },\n                      {\n                        validator: checkNumberForm(\n                          '请输入0-99999.99，支持两位小数',\n                          {\n                            max: 99999.99,\n                            min: 0.01,\n                            decimal: 2,\n                          },\n                        ),\n                      },\n                    ],\n                  })(<Input maxLength={10} placeholder=\"请输入重量\" />)}\n                </Form.Item>\n              </Col>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"体积（方）\">\n                  {getFieldDecorator('goodsVolume', {\n                    initialValue: goodsVolume,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请输入体积',\n                      },\n                      {\n                        validator: checkNumberForm(\n                          '请输入0-99.99，支持两位小数',\n                          {\n                            max: 99.99,\n                            min: 0.01,\n                            decimal: 2,\n                          },\n                        ),\n                      },\n                    ],\n                  })(<Input maxLength={10} placeholder=\"请输入体积\" />)}\n                </Form.Item>\n              </Col>\n              <Col {...formLayoutCols3}>\n                <Form.Item {...formItemLayout} label=\"件数（件）\">\n                  {getFieldDecorator('goodsNumber', {\n                    initialValue: goodsNumber,\n                    rules: [\n                      {\n                        required: true,\n                        message: '请输入件数',\n                      },\n                      {\n                        validator: checkNumberForm(\n                          '请输入0-500，只能输入整数',\n                          {\n                            max: 500,\n                            min: 1,\n                            decimal: 0,\n                          },\n                        ),\n                      },\n                    ],\n                  })(<Input maxLength={10} placeholder=\"请输入件数\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n          </FormEditCard>\n\n          <FormEditCard title=\"增值服务\">\n            <Row gutter={gutter}>\n              <Col {...formLayoutCols3}>\n                <Form.Item\n                  {...formItemLayout}\n                  label=\"回单\"\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('isReceipt', {\n                    initialValue: isReceipt === '没有' ? 0 : 1,\n                  })(\n                    <RadioGroup>\n                      <Radio value={1}>有</Radio>\n                      <Radio value={0}>无</Radio>\n                    </RadioGroup>,\n                  )}\n                </Form.Item>\n              </Col>\n              <Col {...formLayoutCols3}>\n                <Form.Item\n                  {...formItemLayout}\n                  label=\"代收（元）\"\n                  style={{ marginBottom: 0, paddingBottom: 0 }}\n                >\n                  {getFieldDecorator('delegateAmount', {\n                    initialValue: delegateAmount,\n                    rules: [\n                      {\n                        required: false,\n                        message: '请输入代收',\n                      },\n                      {\n                        validator: checkNumberForm(\n                          '请输入0-9999999.99，支持两位小数',\n                          {\n                            max: 9999999.99,\n                            min: 0,\n                            decimal: 2,\n                          },\n                        ),\n                      },\n                    ],\n                  })(<Input maxLength={10} placeholder=\"请输入代收\" />)}\n                </Form.Item>\n              </Col>\n            </Row>\n          </FormEditCard>\n\n          <PageBottom\n            rightChild={\n              <PageBottomButtons\n                buttons={[\n                  <Button key={1} onClick={this.cancel}>\n                    取消\n                  </Button>,\n                  <Button\n                    key={2}\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    loading={loading}\n                  >\n                    {searchParams && searchParams.id ? '保存' : '确认开单'}\n                  </Button>,\n                ]}\n              />\n            }\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default ({ routeId, actions }) => {\n  const mapDispatchToProps = dispatch => ({\n    getAsyncData: (param?: any) => dispatch(actions.getAsyncData(param)),\n    insertPartOrder: (param?: any) => dispatch(actions.insertPartOrder(param)),\n    updatePartOrder: (param?: any) => dispatch(actions.updatePartOrder(param)),\n    getCustomerData: () => dispatch(actions.getCustomerData()),\n    toList: (param?: string, url?: string[]) =>\n      dispatch(actions.toList(param, url)),\n  });\n\n  const selectState = state => state.get(routeId);\n  const globalState = state => state.get('global');\n  const mapStateToProps = createStructuredSelector({\n    error: makeSelectError(selectState),\n    loading: makeSelectLoading(selectState),\n    data: makeSelectData(selectState),\n    insert: makeSelectInsert(selectState),\n    customers: makeSelectCustomerData(selectState),\n    routeIds: makeSelectRouteIds(globalState),\n    // menuCollapsed: makeSelectMenuCollapsed(),\n  });\n\n  const withConnect = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  );\n\n  const form = Form.create()(LtlOrderEdit);\n\n  return compose(withConnect)(form);\n};\n","/**\n * LtlOrderEdit selectors\n * @author djd\n * @date 2018/9/13 下午1:52:15\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nconst globalState = state => state.get('global');\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeSelectData = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('data'));\nexport const makeSelectCustomerData = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('customers'),\n  );\nexport const makeSelectInsert = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('insert'));\nexport const makeSelectRouteIds = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.getIn(['route', 'routeIds']),\n  );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FormEditCard\":\"_1GqvQ\"};"],"sourceRoot":""}