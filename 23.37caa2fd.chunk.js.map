{"version":3,"sources":["webpack:///./src/modules/module.customer.add/index.module.less","webpack:///./src/components/StaffPicker/index.module.less","webpack:///./src/components/CustomerAdd/service.ts","webpack:///./src/components/IndustryPicker/service.ts","webpack:///./src/components/IndustryPicker/IndustryPicker.tsx","webpack:///./src/components/StaffPicker/service.ts","webpack:///./src/components/StaffPicker/selectors.ts","webpack:///./src/components/StaffPicker/StaffPicker.tsx","webpack:///./src/components/StaffPicker/index.ts","webpack:///./src/modules/module.customer.add/index.tsx","webpack:///./src/modules/module.customer.add/selectors.ts"],"names":["module","exports","CustomerAdd__BottomButton","selectOption","service_getSaveHttp","options","url","utmsCustomerId","Object","request","method","data","_objectSpread","salesman","JSON","stringify","useMock","CONFIG","then","res","service_getDictionary","option","returnFormat","params","headers","Content-Type","service_deleteDictionary","libfrom_dll_reference_dll_default","a","globalErrorMsg","service_addDictionary","service_getIndustrys","type","parentDictionaryCode","es_form","Item","Option","es_select","components_IndustryPicker_IndustryPicker","IndustryPicker","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","handleChange","value","onChange","currentDate","length","map","item","dictionaryName","industry","industryCode","dictionaryCode","e","getIndustrysData","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","setState","stop","react","industrys","IndustryPicker_objectSpread","_extends","showSearch","placeholder","concat","optionFilterProp","style","width","d","key","service_getStaffsHttp","service_objectSpread","status","selectors_selectState","get","StaffPicker_Option","StaffPicker_StaffPickerComponent","StaffPickerComponent","StaffPicker_classCallCheck","StaffPicker_possibleConstructorReturn","StaffPicker_getPrototypeOf","getStaffs","StaffPicker_asyncToGenerator","keywords","_args","arguments","undefined","maxLength","abrupt","replace","staffsData","fetching","organizationCode","userDate","_this$state","StaffPicker_objectSpread","mode","notFoundContent","spin","size","onSearch","filterOption","labelInValue","isDisplayMaxErr","StaffPicker_extends","className","index_module_default","display","color","userName","realName","float","fontSize","marginRight","whiteSpace","overflow","textAlign","departmentNames","mapStateToProps","reselect_libfrom_dll_reference_dll","components_StaffPicker","es","module_customer_add_FormItem","RangePicker","date_picker","module_customer_add_confirm","modal","confirm","module_customer_add_CustomerAdd","CustomerAdd","module_customer_add_classCallCheck","module_customer_add_possibleConstructorReturn","module_customer_add_getPrototypeOf","selectedAddress","industyData","handleIndustyPicker","handleUploadFile","file","fileList","index","attachmentseq","attachmenturl","response","save","_ref","module_customer_add_asyncToGenerator","values","propsdata","cooperateDate","dateData","files","tags","msg","toJS","cooperateBeginDate","format","cooperateEndDate","custAttachments","module_customer_add_objectSpread","push","jobcard","name","label","offLimitCarTypes","customerTags","message","success","toList","t0","error","_x","apply","handleSubmit","preventDefault","form","validateFields","err","onSelectedAddress","region","province","city","addToForm","filter","checked","join","setFieldsValue","setTimeout","customertagList","addOption","_ref2","_callee2","_context2","bizType","result","getTags","_x2","_x3","removeOption","_ref3","_callee3","_context3","_x4","_x5","_callee4","oldTags","_customerTags","_context4","i","includes","tag","t","cancleEdit","requestClose","showConfirm","isFieldsTouched","title","content","okText","cancelText","centered","onCancel","immutable_esfrom_dll_reference_dll","_this2","_this$props","searchParams","id","getData","eventEmitter","on","eventSource","nextprops","_this3","formItemLayout","labelCol","span","wrapperCol","_this$props$form","getFieldDecorator","customerTagsProps","getFieldValue","addInputPlaceHolder","addBtnText","resetSelect","isMuti","tagSize","optionSize","departments","defaultFiles","urlArr","attachmentUrl","split","uid","attachmentSeq","toString","console","log","module_customer_add_index_module_default","card","bordered","layout","module_customer_add_extends","rules","required","input","row","col","md","pattern","MutiSelectWithEditableOptions","AddressSelect","onSelected","CarModelCarLong","upload","action","defaultFileList","es_button","disabled","icon","htmlType","onClick","marginLeft","__webpack_exports__","_ref5","routeId","connectModel","actions","selectState","currentState","selectors_makeSelectError","loading","selectors_makeSelectLoading","mapDispatchToProps","dispatch","getAsyncData","create","mapPropsToFields","fields","keys","forEach","itemData","parse","createFormField","momentfrom_dll_reference_dll_default"],"mappings":"iFACAA,EAAAC,SAAkBC,0BAAA,+BCAlBF,EAAAC,SAAkBE,aAAA,mtBC0BX,IAAMC,EAAc,SAAAC,GACzB,IAAIC,EAnBW,qDAuBf,OAHID,EAAQE,iBACVD,EApBkB,yDAsBbE,OAAAC,EAAA,EAAAD,EAEHE,OAAQ,OACRJ,MACAK,KAAIC,KACCP,GACHQ,SAAUC,KAAKC,UAAUV,EAAQQ,cAInCG,QAASC,EAAA,IAEXC,KAAK,SAAAC,GAAG,OAAIA,KAIHC,EAAgB,SAAAf,GAC3B,IAAMgB,EAAMT,KACPP,GACHiB,aAAc,IAEhB,OAAOd,OAAAC,EAAA,EAAAD,EACLE,OAAQ,OACRJ,IA3CF,oEA4CEK,KAAMU,EACNE,OAAQF,EACRG,SACEC,eAAgB,sDAEjBP,KAAK,SAAAC,GAAG,OAAIA,KAIJO,EAAmB,SAAAH,GAAM,OACpCf,OAAAC,EAAA,EAAAD,EAEIE,OAAQ,OACRJ,IAvDJ,iEAwDIK,KAAMgB,EAAAC,EAAGb,UAAUQ,KAGnBP,SAAS,EACTa,gBAAgB,IAElBX,KAAK,SAAAC,GAAG,OAAIA,KAGHW,EAAgB,SAAAP,GAAM,OACjCf,OAAAC,EAAA,EAAAD,EAEIE,OAAQ,OACRJ,IAnEJ,oEAoEIK,KAAMgB,EAAAC,EAAGb,UAAUQ,KAGnBP,SAAS,EACTa,gBAAgB,IAElBX,KAAK,SAAAC,GAAG,OAAIA,6BCpET,IAAMY,EAAe,SAAAC,GAC1B,IAAM3B,GACJ4B,qBAAsBD,GAAc,YACpCV,aAAc,GAEhB,OAAOd,OAAAC,EAAA,EAAAD,EAEHE,OAAQ,OACRJ,IArBJ,oEAsBIK,KAAMN,EACNkB,OAAQlB,EACRmB,SACEC,eAAgB,sDAIlBT,QAASC,EAAA,IAEXC,KAAK,SAAAC,GAAG,OAAIA,gvCCjBCe,EAAA,EAAKC,KAAtB,IACMC,EAASC,EAAA,EAAOD,OA2EtBE,cA9DE,SAAAC,EAAYC,GAAO,IAAAC,EAAA,mGAAAC,CAAAC,KAAAJ,IACjBE,EAAAG,EAAAD,KAAAE,EAAAN,GAAAO,KAAAH,KAAMH,KAFRO,WACmB,EAAAN,EA6BXO,aAAe,SAAAC,GAAS,IACtBtC,EAAS8B,EAAKM,MAAdpC,KACAuC,EAAaT,EAAKD,MAAlBU,SACJC,KACJ,GAAMxC,GAAQA,EAAKyC,OAAnB,CAGAzC,EAAK0C,IAAI,SAAAC,GACHA,EAAKC,iBAAmBN,IAC1BE,GACEK,SAAUP,EACVQ,aAAcH,EAAKI,mBAIzB,IACMR,GACFA,EAASD,EAAOE,GAElB,MAAOQ,OAhDQlB,EAqDXmB,gNArDWC,CAAAC,mBAAAC,KAqDQ,SAAAC,IAAA,IAAAhC,EAAArB,EAAA,OAAAmD,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBpC,EAASS,EAAKD,MAAdR,KADiBkC,EAAAE,KAAA,EAENrC,EAAaC,GAFP,OAEnBrB,EAFmBuD,EAAAG,KAGzB5B,EAAK6B,UACH3D,KAAMA,EAAKA,OAJY,wBAAAuD,EAAAK,SAAAP,EAAArB,SAnDzBF,EAAKM,OACHpC,SAEF8B,EAAKmB,mBALYnB,yPAFQ+B,EAAA,yDAWzB,IAAMC,EAAY9B,KAAKI,MAAMpC,SACvB6B,qUAAKkC,IAAQ/B,KAAKH,OACxB,OACEgC,EAAA,cAACnC,EAAA,EAADsC,GACEC,YAAU,EACVC,YAAW,GAAAC,OACTtC,EAAMqC,YAAcrC,EAAMqC,YAAc,8CAE1CE,iBAAiB,WACjBC,OAASC,MAAO,SACZzC,GACJU,SAAUP,KAAKK,eAEdyB,EAAUpB,IAAI,SAAA6B,GAAC,OACdV,EAAA,cAACpC,GAAO+C,IAAKD,EAAE3B,gBAAiB2B,EAAE3B,wMCvCrC,IAAM6B,EAAgB,SAAA/E,GAAO,OAClCG,OAAAC,EAAA,EAAAD,EAEIE,OAAQ,OACRJ,IAjBgB,0DAkBhBK,wUAAI0E,IACChF,GACHiF,OAAQ,MAIVtE,QAASC,EAAA,IAEXC,KAAK,SAAAC,GAAG,OAAIA,kDChCVoE,EAAc,SAAAxC,GAAK,OAAIA,EAAMyC,IAAI,mwCCyBtBtD,EAAA,EAAKC,KAAtB,IACMsD,GAASpD,EAAA,EAAOD,OAgBhBsD,eAEJ,SAAAC,EAAYnD,GAAO,IAAAC,EAAA,mGAAAmD,CAAAjD,KAAAgD,IACjBlD,EAAAoD,GAAAlD,KAAAmD,GAAAH,GAAA7C,KAAAH,KAAMH,KAFRO,WACmB,EAAAN,EAyDXsD,yMAzDWC,CAAAlC,mBAAAC,KAyDC,SAAAC,IAAA,IAAAiC,EAAAtF,EAAAuF,EAAAC,UAAA,OAAArC,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAO6B,EAAPC,EAAA9C,OAAA,QAAAgD,IAAAF,EAAA,GAAAA,EAAA,GAAkB,KAChCzD,EAAKM,MAAME,OAASR,EAAKM,MAAME,MAAMG,QAAUX,EAAKD,MAAM6D,WAD5C,CAAAnC,EAAAE,KAAA,eAAAF,EAAAoC,OAAA,oBAIlBL,EAAWA,EAASM,QAAQ,iBAAkB,IAJ5B,CAAArC,EAAAE,KAAA,eAAAF,EAAAoC,OAAA,wBAQlB7D,EAAK6B,UACHkC,cACAC,UAAU,IAVMvC,EAAAE,KAAA,EAYCgB,GACjBa,WACAS,iBAAkBjE,EAAKD,MAAMmE,SAASnB,IAAI,sBAd1B,OAYZ7E,EAZYuD,EAAAG,KAgBlB5B,EAAK6B,UACHkC,WAAY7F,EAAKA,KACjB8F,UAAU,IAlBM,yBAAAvC,EAAAK,SAAAP,EAAArB,SAzDDF,EA+EXO,aAAe,SAAAC,IAChBR,EAAKM,MAAME,OAAUA,KAG1BR,EAAK6B,UACHrB,QACAuD,cACAC,UAAU,IAERhE,EAAKD,MAAMU,UACbT,EAAKD,MAAMU,SAASD,KAvFtBR,EAAKM,OACHyD,cACAC,UAAU,GAJKhE,0PAFc+B,EAAA,yDAUjB,IAAAoC,EAC0BjE,KAAKI,MAArC0D,EADMG,EACNH,SAAUD,EADJI,EACIJ,WACZhE,GAFQoE,EACgB3D,yUACd4D,KAEZC,KAAM,WACN9B,OAASC,MAAO,QAChBJ,YAAa,iFACbkC,gBAAiBN,EAAWjC,EAAA,cAACwC,EAAA,GAAKC,KAAK,UAAa,KACpD/D,SAAUP,KAAKK,aACfkE,SAAUvE,KAAKoD,UACfoB,cAAc,GAEbxE,KAAKH,OACR4E,cAAc,KAEhB5E,EAAMU,SAAWP,KAAKK,aACjBR,EAAMS,QACTT,EAAMS,UAER,IAAMoE,EACJ1E,KAAKI,MAAME,OAASN,KAAKI,MAAME,MAAMG,QAAUT,KAAKH,MAAM6D,UAC5D,OACE7B,EAAA,cAACnC,EAAA,EAADiF,KAAY9E,GAAO+E,UAAWC,EAAA5F,EAAOzB,eACnCqE,EAAA,cAACiB,IAAON,IAAI,QAAQH,OAASyC,QAASJ,EAAkB,GAAK,SAC3D7C,EAAA,sBAAMQ,OAAS0C,MAAO,YAAtB,yFAEDlB,EAAWnD,IAAI,SAAA6B,GAAC,OACfV,EAAA,cAACiB,IAAON,IAAKD,EAAEyC,UACZzC,EAAE0C,SACHpD,EAAA,sBACEQ,OACE6C,MAAO,QACPC,SAAU,OACVJ,MAAO,OACPK,YAAa,OACb9C,MAAO,MACP+C,WAAY,SACZC,SAAU,SACVC,UAAW,UAGZhD,EAAEiD,4DA6CXC,GAAkB5H,OAAA6H,EAAA,yBAAA7H,EACtBmG,SDxIAnG,OAAA6H,EAAA,eAAA7H,CAAe+E,EAAa,SAAAxC,GAAK,OAAIA,EAAMyC,IAAI,gBEJjD8C,GD+I2B9H,OAAA+H,EAAA,QAAA/H,CACzB4H,GACA,qBAFyB5H,CAGzBkF,4yDExGF,IAAM8C,GAAWtG,EAAA,EAAKC,KACdsG,GAAgBC,EAAA,EAAhBD,YACFE,GAAUC,EAAA,EAAMC,QA0BhBC,eAIJ,SAAAC,EAAYvG,GAAO,IAAAC,EAAA,mGAAAuG,CAAArG,KAAAoG,IACjBtG,EAAAwG,GAAAtG,KAAAuG,GAAAH,GAAAjG,KAAAH,KAAMH,KAJRO,WAGmB,EAAAN,EAFnB0G,qBAEmB,EAAA1G,EADnB2G,iBACmB,EAAA3G,EA0OX4G,oBAAsB,SAACpG,EAAO5C,GACpCoC,EAAK2G,YAAc/I,GA3OFoC,EA8OX6G,iBAAmB,SAAAC,GACzB,IAAM5I,EAAO4I,EAAKC,SAASnG,IAAI,SAACC,EAAMmG,GACpC,OACEC,cAAeD,EACfE,cAA+B,SAAhBrG,EAAKgC,OAAoBhC,EAAKsG,SAASjJ,KAAO,MAGjE8B,EAAK6B,UACHkF,SAAU7I,KAtPK8B,EAyPXoH,KAzPW,eAAAC,EAAAC,GAAAjG,mBAAAC,KAyPJ,SAAAC,EAAMgG,GAAN,IAAAC,EAAAC,EAAAC,EAAAC,EAAA/J,EAAAQ,EAAAwJ,EAAAC,EAAA,OAAAxG,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACP6F,EAAYxH,EAAKD,MAAM7B,KAAK4J,OAE5BL,EAAgBF,EAAOE,cACvBC,GACJK,mBACEN,GAAiBA,EAAc9G,OAC3B8G,EAAc,GAAGO,OAAO,uBACxB,GACNC,iBACER,GAAiBA,EAAc9G,OAC3B8G,EAAc,GAAGO,OAAO,uBACxB,IAEFL,GACJO,gBAAiB7J,KAAKC,UAAU0B,EAAKM,MAAMyG,WAEvCnJ,EAjBOuK,MAkBRZ,EACAvH,EAAK0G,gBACLgB,EACAC,GAECvJ,KACFR,EAAQQ,UAAYR,EAAQQ,SAASuC,SACvC/C,EAAQQ,SAASwC,IAAI,SAAA6B,GACnBrE,EAASgK,MACPC,QAAS5F,EAAEC,IACX4F,KAAM7F,EAAE8F,MAAM,OAGlB3K,EAAQQ,SAAWA,GAErBR,EAAQ4K,iBAAmBnK,KAAKC,UAAUV,EAAQ4K,kBACd,kBAAzB5K,EAAQ6K,eACbb,EAAO,GACXhK,EAAQ6K,aAAa7H,IAAI,SAAA6B,GACvBmF,GAAQnF,EAAEC,IAAM,MAElB9E,EAAQ6K,aAAeb,GAvCZnG,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GA2CQhE,EAAWwK,MACzBX,EACA5J,EACAoC,EAAK2G,cA9CC,QAAAlF,EAAAG,KAiDPhE,EAAQE,eACV4K,EAAA,EAAQC,QAAQ,oDAEhBD,EAAA,EAAQC,QAAQ,wCAElB3I,EAAKD,MAAM6I,SAtDAnH,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoH,GAAApH,EAAA,SAwDLoG,EAAMpG,EAAAoH,IAAOpH,EAAAoH,GAAIhB,IAAMpG,EAAAoH,GAAIhB,IAAM,sDACvCa,EAAA,EAAQI,MAAMjB,GAAO,4BAzDV,yBAAApG,EAAAK,SAAAP,EAAArB,OAAA,WAzPI,gBAAA6I,GAAA,OAAA1B,EAAA2B,MAAA9I,KAAAwD,YAAA,GAAA1D,EAqTXiJ,aAAe,SAAA/H,GACrBA,EAAEgI,iBACFlJ,EAAKD,MAAMoJ,KAAKC,eAAe,SAACC,EAAK9B,GAC9B8B,GACHrJ,EAAKoH,KAAKG,MAzTGvH,EA8TXsJ,kBAAoB,SAAA1L,GAC1BoC,EAAK0G,gBAAkB9I,IACrB2L,OAAQ,GACRC,SAAU,GACVC,KAAM,KAlUSzJ,EAsUX0J,UAAY,SAACnK,EAAM3B,GAAY,IAC7BuL,EAASnJ,EAAKD,MAAdoJ,KACFvB,EAAOhK,EACV+L,OAAO,SAAA/K,GACN,OAAOA,EAAOgL,UAEfhJ,IAAI,SAAAhC,GACH,OAAOA,EAAO4B,QAEfqJ,KAAK,KACRV,EAAKW,gBACHrB,aAAcb,IAEhBmC,WAAW,WACT/J,EAAK6B,UACH4G,aAAc7K,EAAQ+L,OAAO,SAAA/K,GAAM,OAAIA,EAAOgL,UAC9CI,gBAAiBpM,KAElB,IAxVcoC,EA2VXiK,UA3VW,eAAAC,EAAA5C,GAAAjG,mBAAAC,KA2VC,SAAA6I,EAAO5K,EAAMX,GAAb,IAAAE,EAAA,OAAAuC,mBAAAG,KAAA,SAAA4I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,cACZ7C,GACJuL,QAAS9K,EACT0B,eAAgBrC,GAHAwL,EAAAzI,KAAA,EAKGtC,EAAcP,GALjB,UAMI,YANJsL,EAAAxI,KAMP0I,OANO,CAAAF,EAAAzI,KAAA,eAAAyI,EAAAzI,KAAA,EAOV3B,EAAKuK,UAPK,wBAAAH,EAAAtI,SAAAqI,EAAAjK,SA3VD,gBAAAsK,EAAAC,GAAA,OAAAP,EAAAlB,MAAA9I,KAAAwD,YAAA,GAAA1D,EAyWX0K,aAzWW,eAAAC,EAAArD,GAAAjG,mBAAAC,KAyWI,SAAAsJ,EAAOrL,EAAMX,GAAb,IAAAE,EAAA,OAAAuC,mBAAAG,KAAA,SAAAqJ,GAAA,cAAAA,EAAAnJ,KAAAmJ,EAAAlJ,MAAA,cACf7C,GACJuL,QAAS9K,EACT0B,eAAgBrC,GAHGiM,EAAAlJ,KAAA,EAKA1C,EAAiBH,GALjB,UAMC,YAND+L,EAAAjJ,KAMV0I,OANU,CAAAO,EAAAlJ,KAAA,eAAAkJ,EAAAlJ,KAAA,EAOb3B,EAAKuK,UAPQ,wBAAAM,EAAA/I,SAAA8I,EAAA1K,SAzWJ,gBAAA4K,EAAAC,GAAA,OAAAJ,EAAA3B,MAAA9I,KAAAwD,YAAA,GAAA1D,EAoXXuK,QApXWjD,GAAAjG,mBAAAC,KAoXD,SAAA0J,IAAA,IAAAV,EAAA1C,EAAAqD,EAAA9G,EAAA+G,EAAA,OAAA7J,mBAAAG,KAAA,SAAA2J,GAAA,cAAAA,EAAAzJ,KAAAyJ,EAAAxJ,MAAA,cAAAwJ,EAAAxJ,KAAA,EACKhD,GACnBa,qBAAsB,iBAFR,OAIM,aAHhB8K,EADUa,EAAAvJ,MAIL0I,SACH1C,KACFqD,EAAU,GAFiB9G,EAGWnE,EAAKM,MAAvCmI,EAHuBtE,EAGvBsE,aAHuBtE,EAGT6F,gBACtBvB,EAAa7H,IAAI,SAAA6B,GACfwI,GAAWxI,EAAEC,IAAM,MAErB4H,EAAOpM,KAAK0C,IAAI,SAAC6B,EAAG2I,GAClB,IAAIxB,GAAU,EACVqB,EAAQI,SAAS5I,EAAE3B,iBACrB2H,EAAa7H,IAAI,SAAA0K,GACXA,EAAI5I,MAAQD,EAAE3B,iBAChB8I,EAAU0B,EAAI1B,WAKpB,IAAM2B,GACJ7I,IAAKD,EAAE3B,eACPN,MAAOiC,EAAE3B,eACT8I,WAEFhC,EAAKQ,KAAKmD,KAEZvL,EAAK6B,UACHmI,gBAAiBpC,KA7BL,wBAAAuD,EAAArJ,SAAAkJ,EAAA9K,SApXCF,EAsZXwL,WAAa,SAACC,GACpB,IACIC,GAAc,EAEd1L,EAAKD,MAAMoJ,KAAKwC,iBAHO,mBAIzBD,GAAc,GAEZA,EACFxF,IACE0F,MAAO,6CACPC,QAAS,2EACTC,OAAQ,2BACRC,WAAY,eACZC,UAAU,EACVC,SAAU,WACJR,EACFA,IAEAzL,EAAKD,MAAM6I,YAKb6C,EACFA,IAEAzL,EAAKD,MAAM6I,UA9af5I,EAAKM,OACH0J,gBAAiBjM,OAAAmO,GAAA,KAAAnO,GACjB0K,aAAczI,EAAKD,MAAM7B,KAAKuK,iBAC9B1B,aALe/G,0PAJK+B,EAAA,oEAaG,IAAAoK,EAAAjM,KAAAkM,EACMlM,KAAKH,MAA5BsM,EADiBD,EACjBC,aAAcnO,EADGkO,EACHlO,KAClBmO,EAAaC,IACfpM,KAAKH,MAAMwM,QAAQF,EAAaC,IAElCpM,KAAK2B,UACH4G,aAAcvK,EAAK4J,OAAOW,mBAE5BvI,KAAKqK,UAELrK,KAAKH,MAAMyM,aAAaC,GAAG,QAAS,SAAChB,EAAciB,GAE/B,mBAAhBA,GACgB,qBAAhBA,EAEAP,EAAKX,WAAWC,GAEhBA,wDAIoBkB,GACpBA,EAAUzO,KAAK4J,OAAOW,eACxBvI,KAAK2B,UACH4G,aAAckE,EAAUzO,KAAK4J,OAAOW,mBAEtCvI,KAAKqK,4CAGO,IAAAqC,EAAA1M,KACNgI,EAAoBhI,KAAKH,MAAM7B,KAAK4J,OAApCI,gBACAoE,EAAOpM,KAAKH,MAAMsM,aAAlBC,GAEFhM,EAAQJ,KAAKI,MACbuM,GACJC,UACEC,KAAM,GAERC,YAAcD,KAAM,KATRE,EAeV/M,KAAKH,MAAMoJ,KAHb+D,EAZYD,EAYZC,kBAKIC,GAjBQF,EAaZG,cAbYH,EAcZnD,gBAIAlM,QAAS0C,EAAM0J,gBACf5H,YAAa,uFACbiL,oBAAqB,+DACrBC,WAAY,2BACZC,aAAa,EACbC,QAAQ,EACRC,QAAS,EACTC,WAAY,GACZhD,aAAc,SAAA9L,GAAM,OAAIgO,EAAKlC,aAAa,eAAgB9L,IAC1DqL,UAAW,SAAArL,GAAM,OAAIgO,EAAK3C,UAAU,eAAgBrL,IACpD8K,UAAW,SAAAiE,GAAW,OAAIf,EAAKlD,UAAU,eAAgBiE,MAGrDC,KAcN,OAbI1F,GAAmBA,EAAgBvH,QACrCuH,EAAgBtH,IAAI,SAAAC,GAClB,IAAMgN,EAAShN,EAAKiN,cAAcC,MAAM,KACxCH,EAAaxF,MACX4F,IAAKnN,EAAKoN,cAAcC,WACxB5F,KAAMuF,EAAOA,EAAOlN,OAAS,GAC7BkC,OAAQ,OACRhF,IAAKgD,EAAKiN,kBAKhBK,QAAQC,IAAIR,EAAc,OAAQ1F,GAEhCnG,EAAA,qBAAK+C,UAAWuJ,GAAAlP,EAAOmH,aACrBvE,EAAA,cAACuM,EAAA,GAAK1C,MAAK,GAAAvJ,OAAKiK,EAAK,eAAO,eAAjB,gBAA2BiC,UAAU,GAC9CxM,EAAA,cAACtC,EAAA,GAAK+O,OAAO,cACXzM,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,gBACjBwB,QAEIC,UAAU,EACVjG,QAAS,gDAJdwE,CAOEnL,EAAA,cAAC6M,EAAA,GAAMxM,YAAY,iDAExBL,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgB8B,UAAQ,EAACpG,MAAM,6BAC3CxG,EAAA,cAAC8M,EAAA,EAAD,KACE9M,EAAA,cAAC+M,EAAA,GAAIC,GAAI,GACPhN,EAAA,cAACgE,GAAD,KACGmH,EAAkB,WACjBwB,QAEIC,UAAU,EACVjG,QAAS,kEAJdwE,CAQCnL,EAAA,cAAC6M,EAAA,GACCrP,KAAK,OACL6C,YAAY,iCACZG,OAASC,MAAO,KAChBoB,UAAW,QAKnB7B,EAAA,cAAC+M,EAAA,GAAIC,GAAI,IACPhN,EAAA,cAACgE,GAAD,KACGmH,EAAkB,cACjBwB,QAEIC,UAAU,EACVjG,QAAS,2DAGTsG,QAAS,gBACTtG,QAAS,kEARdwE,CAYCnL,EAAA,cAAC6M,EAAA,GACCrP,KAAK,OACL6C,YAAY,6CACZwB,UAAW,UAOvB7B,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,6BACjC2E,EAAkB,gBACjBwB,QAEIC,UAAU,EACVjG,QAAS,gDAJdwE,CAOEnL,EAAA,cAAC6M,EAAA,GAAMxM,YAAY,iDAExBL,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,cAAlBA,CACCnL,EAAA,cAAClC,GAAeY,SAAUP,KAAK0G,wBAGnC7E,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,oBAAlBA,CACCnL,EAAA,cAAClC,GACCN,KAAK,iBACL6C,YAAY,iDAIlBL,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,gBAAlBA,CACCnL,EAAA,cAACiE,IAAYzD,OAASC,MAAO,YAGjCT,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,kBAAlBA,CACCnL,EAAA,cAACkN,EAAA,EAAkC9B,KAGvCpL,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,6BACjC2E,EAAkB,aAAlBA,CACCnL,EAAA,cAACmN,EAAA,GACC9M,YAAY,6CACZ+M,WAAYjP,KAAKoJ,kBACjB/G,OAASC,MAAO,YAItBT,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,mBAAlBA,CACCnL,EAAA,cAACqN,EAAA,GAAgBhN,YAAY,qCAGjCL,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,cAAlBA,CAAkCnL,EAAA,cAAC8D,IAAYjC,UAAW,MAE7D7B,EAAA,cAACgE,GAAD0I,MAAc5B,GAAgBtE,MAAM,mCACjC2E,EAAkB,kBAAlBA,CACCnL,EAAA,cAACsN,EAAA,GACCC,OAAO,sDACP7O,SAAUP,KAAK2G,iBACf0I,gBAAiB3B,GAEjB7L,EAAA,cAACyN,EAAA,GAAOC,SAAUnP,EAAMyG,SAASpG,QAAU,GACzCoB,EAAA,cAAC2N,EAAA,GAAKnQ,KAAK,WADb,gCAMNwC,EAAA,qBAAKQ,OAASkD,UAAW,WACvB1D,EAAA,cAACyN,EAAA,GACC9M,IAAK,EACLnD,KAAK,UACLoQ,SAAS,SACTC,QAAS,SAAA1O,GACP0L,EAAK3D,aAAa/H,KALtB,gBAUAa,EAAA,cAACyN,EAAA,GACCjN,OAASsN,WAAY,IACrBnN,IAAK,EACLkN,QAAS,WACPhD,EAAKpB,eAJT,2DA8NdsE,EAAA,iBAAeC,GAA+B,IAA5BC,EAA4BD,EAA5BC,QAChB,OAAOC,EADqCF,EAAnBE,cACL,SAAAC,GAClB,ICnf0BC,EDmfpBC,EAAe,SAAA9P,GAAK,OAAIA,EAAMyC,IAAIiN,IACxC,OACErK,gBAAiB5H,OAAA6H,EAAA,yBAAA7H,EACfG,MCtfsBiS,EDsfDC,ECrf3BrS,OAAA6H,EAAA,eAAA7H,CAAeoS,EAAa,SAAC7P,GAAD,OAA6BA,EAAMyC,IAAI,WDuf7D+F,MChgBuB,SAAAqH,GAAW,OACxCpS,OAAA6H,EAAA,eAAA7H,CAAeoS,EAAa,SAAC7P,GAAD,OAA6BA,EAAMyC,IAAI,WD+ftDsN,CAAgBD,GACvBE,QC9fyB,SAAAH,GAAW,OAC1CpS,OAAA6H,EAAA,eAAA7H,CAAeoS,EAAa,SAAC7P,GAAD,OAC1BA,EAAMyC,IAAI,aD4fGwN,CAAkBH,KAE7BI,mBAAoB,SAAAC,GAAQ,OAC1B7H,OAAQ,SAAAhL,GAAO,OAAI6S,EAASP,EAAQtH,OAAOhL,KAC3C2O,QAAS,SAAAD,GAAE,OAAImE,EAASP,EAAQQ,aAAapE,SAX5C2D,CAeLxQ,EAAA,EAAKkR,QACHC,iBADU,SACO7Q,GACf,IAAM7B,EAAO6B,EAAM7B,KAAK4J,OAClB+I,KAyCN,OAxCA9S,OAAO+S,KAAK5S,OAAY6S,QAAQ,SAAAtO,GAC9B,IAAIuO,EAAW9S,EAAKuE,GAEpB,GAAU,aAANA,GAAoBuO,GAAYA,EAASrQ,OAAQ,CACnD,IAAMvC,KACNC,KAAK4S,MAAMD,GAAUpQ,IAAI,SAAAC,GACvBzC,EAASgK,MACP1F,IAAK7B,EAAKwH,QACVE,OAAQ1H,EAAKyH,UAGjB0I,EAAW5S,EAEH,qBAANqE,GAA4BuO,GAAYA,EAASrQ,SACnDqQ,EAAW3S,KAAK4S,MAAMD,IAexBH,EAAOpO,GAAKhD,EAAA,EAAKyR,iBACf1Q,MAAOwQ,IAETH,EAAOpJ,cAAgBhI,EAAA,EAAKyR,iBAC1B1Q,OACE2Q,IAAOjT,EAAK6J,oBACZoJ,IAAOjT,EAAK+J,uBAIlBkG,QAAQC,IAAIyC,EAAQ,QACpB1I,MACK0I,KA7CTpR,CAgDG4G","file":"23.37caa2fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CustomerAdd__BottomButton\":\"hDTot\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectOption\":\"_3AV6_\"};","/**\n * Auth Service\n * @author yanrong.tian\n */\nimport qs from 'qs';\nimport request, { mocker } from 'utils/request';\nimport { USE_MOCK } from '../../CONFIG';\n\n// API list\nconst API_SAVE = '/ehuodiGateway/utmsCore/utmsCustomercs/addCustomer'; // 保存\nconst API_EDIT_SAVE = '/ehuodiGateway/utmsCore/utmsCustomercs/modifyCustomer'; // 修改\nconst API_DICTIONARY =\n  '/ehuodiGateway/utmsCore/utmsDictionarycs/selectCustDictionaryList'; // 字典信息\nconst API_DELETEDICTIONARY =\n  '/ehuodiGateway/utmsCore/utmsDictionarycs/delCustUtmsDictionary';\nconst API_ADDDICTIONARY =\n  '/ehuodiGateway/utmsCore/utmsDictionarycs/createCustUtmsDictionary';\n\nif (process.env.NODE_ENV === 'development') {\n  mocker\n    .on('post', API_SAVE)\n    .reply(() => import('./mock/save').then(exports => [200, exports.default]));\n}\n\n/**\n * 保存新建客户\n */\nexport const getSaveHttp = options => {\n  let url = API_SAVE;\n  if (options.utmsCustomerId) {\n    url = API_EDIT_SAVE;\n  }\n  return request(\n    {\n      method: 'post',\n      url,\n      data: {\n        ...options,\n        salesman: JSON.stringify(options.salesman),\n      },\n    },\n    {\n      useMock: USE_MOCK,\n    },\n  ).then(res => res);\n};\n\n// 获取字典列表\nexport const getDictionary = options => {\n  const option = {\n    ...options,\n    returnFormat: 1,\n  };\n  return request({\n    method: 'post',\n    url: API_DICTIONARY,\n    data: option,\n    params: option,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n    },\n  }).then(res => res);\n};\n\n// 删除字典字段\nexport const deleteDictionary = params =>\n  request(\n    {\n      method: 'post',\n      url: API_DELETEDICTIONARY,\n      data: qs.stringify(params),\n    },\n    {\n      useMock: false,\n      globalErrorMsg: true,\n    },\n  ).then(res => res);\n\n// 增加字典字段\nexport const addDictionary = params =>\n  request(\n    {\n      method: 'post',\n      url: API_ADDDICTIONARY,\n      data: qs.stringify(params),\n    },\n    {\n      useMock: false,\n      globalErrorMsg: true,\n    },\n  ).then(res => res);\n","/**\n * Auth Service\n * @author yanrong.tian\n */\nimport request, { mocker } from 'utils/request';\nimport { USE_MOCK } from '../../CONFIG';\n\n// API list\nconst API_INDUSTRYS =\n  '/ehuodiGateway/utmsCore/utmsDictionarycs/selectUtmsDictionaryList';\n\nif (process.env.NODE_ENV === 'development') {\n  mocker\n    .on('post', API_INDUSTRYS)\n    .reply(() =>\n      import('./mock/industrys').then(exports => [200, exports.default]),\n    );\n}\n\n/**\n * 获取字典列表\n */\nexport const getIndustrys = type => {\n  const options = {\n    parentDictionaryCode: type ? type : 'INDUSTRYS',\n    returnFormat: 1,\n  };\n  return request(\n    {\n      method: 'post',\n      url: API_INDUSTRYS,\n      data: options,\n      params: options,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n      },\n    },\n    {\n      useMock: USE_MOCK,\n    },\n  ).then(res => res);\n};\n","/**\n * DateTimePicker Component\n * @author yanrong.tian\n * @date 2018/9/12 下午2:41:24\n */\nimport {\n  AutoComplete,\n  Button,\n  Cascader,\n  Checkbox,\n  Col,\n  Form,\n  Icon,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Spin,\n  Tooltip,\n} from 'antd';\nimport * as React from 'react';\nimport { getIndustrys } from './service';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\ninterface IProps {\n  type?: string; // 字典code\n  onChange?: any;\n  placeholder?: string; // 提示语\n}\ninterface IState {\n  data: any;\n}\n\nclass IndustryPicker extends React.PureComponent<IProps> {\n  state: IState;\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n    this.getIndustrysData();\n  }\n\n  public render() {\n    const industrys = this.state.data || [];\n    const props = { ...this.props };\n    return (\n      <Select\n        showSearch\n        placeholder={`${\n          props.placeholder ? props.placeholder : '请选择客户行业'\n        }`}\n        optionFilterProp=\"children\"\n        style={{ width: '100%' }}\n        {...props}\n        onChange={this.handleChange}\n      >\n        {industrys.map(d => (\n          <Option key={d.dictionaryName}>{d.dictionaryName}</Option>\n        ))}\n      </Select>\n    );\n  }\n\n  private handleChange = value => {\n    const { data } = this.state;\n    const { onChange } = this.props;\n    let currentDate = {};\n    if (!(data && data.length)) {\n      return;\n    }\n    data.map(item => {\n      if (item.dictionaryName === value) {\n        currentDate = {\n          industry: value,\n          industryCode: item.dictionaryCode,\n        };\n      }\n    });\n    try {\n      if (onChange) {\n        onChange(value, currentDate);\n      }\n    } catch (e) {\n      //\n    }\n  };\n\n  private getIndustrysData = async () => {\n    const { type } = this.props;\n    const data = await getIndustrys(type);\n    this.setState({\n      data: data.data,\n    });\n  };\n}\n\nexport default IndustryPicker;\n","/**\n * Auth Service\n * @author yanrong.tian\n */\nimport request, { mocker } from 'utils/request';\nimport { USE_MOCK } from '../../CONFIG';\n\n// API list\nconst API_CUSTOMERS = '/ehuodiGateway/utmsCore/utmsUserscs/selectUtmsUsersList';\n\nif (process.env.NODE_ENV === 'development') {\n  mocker\n    .on('post', API_CUSTOMERS)\n    .reply(() =>\n      import('./mock/staffs').then(exports => [200, exports.default]),\n    );\n}\n\n/**\n * 获取客户列表\n */\nexport const getStaffsHttp = options =>\n  request(\n    {\n      method: 'post',\n      url: API_CUSTOMERS,\n      data: {\n        ...options,\n        status: 1,\n      },\n    },\n    {\n      useMock: USE_MOCK,\n    },\n  ).then(res => res);\n","import { createSelector } from 'reselect';\n\nconst selectState = state => state.get('authorization');\n\nexport const makeUserDate = () =>\n  createSelector(selectState, state => state.get('userData'));\n","/**\n * DateTimePicker Component\n * @author yanrong.tian\n * @date 2018/9/12 下午2:41:24\n */\nimport {\n  AutoComplete,\n  Button,\n  Cascader,\n  Checkbox,\n  Col,\n  Form,\n  Icon,\n  Input,\n  Modal,\n  Row,\n  Select,\n  Spin,\n  Tooltip,\n} from 'antd';\nimport { getStaffsHttp } from 'components/StaffPicker/service';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport styles from './index.module.less';\nimport { makeUserDate } from './selectors';\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\ninterface IProps {\n  onChange?: (\n    value: {\n      key: string | number;\n      label: any[];\n    },\n  ) => void;\n}\ninterface IState {\n  fetching: boolean;\n  staffsData: any[];\n  value?: any[];\n}\n\nclass StaffPickerComponent extends React.PureComponent<IProps> {\n  state: IState;\n  constructor(props) {\n    super(props);\n    this.state = {\n      staffsData: [],\n      fetching: false,\n    };\n  }\n\n  public render() {\n    const { fetching, staffsData, value } = this.state;\n    const props: any = {\n      ...{\n        mode: 'multiple',\n        style: { width: '100%' },\n        placeholder: '输入员工姓名模糊检索，多选',\n        notFoundContent: fetching ? <Spin size=\"small\" /> : null,\n        onChange: this.handleChange,\n        onSearch: this.getStaffs,\n        filterOption: false,\n      },\n      ...this.props,\n      labelInValue: true,\n    };\n    props.onChange = this.handleChange;\n    if (!props.value) {\n      props.value = [];\n    }\n    const isDisplayMaxErr =\n      this.state.value && this.state.value.length >= this.props.maxLength;\n    return (\n      <Select {...props} className={styles.selectOption}>\n        <Option key=\"a0000\" style={{ display: isDisplayMaxErr ? '' : 'none' }}>\n          <span style={{ color: '#ff0000' }}>已达到上限，请删除后再添加！</span>\n        </Option>\n        {staffsData.map(d => (\n          <Option key={d.userName}>\n            {d.realName}\n            <span\n              style={{\n                float: 'right',\n                fontSize: '12px',\n                color: '#999',\n                marginRight: '20px',\n                width: '4em',\n                whiteSpace: 'nowrap',\n                overflow: 'hidden',\n                textAlign: 'right',\n              }}\n            >\n              {d.departmentNames}\n            </span>\n          </Option>\n        ))}\n      </Select>\n    );\n  }\n\n  private getStaffs = async (keywords = '') => {\n    if (this.state.value && this.state.value.length >= this.props.maxLength) {\n      return;\n    }\n    keywords = keywords.replace(/(^\\s*)|(\\s*$)/g, '');\n    if (!keywords) {\n      return;\n    }\n    this.setState({\n      staffsData: [],\n      fetching: true,\n    });\n    const data = await getStaffsHttp({\n      keywords,\n      organizationCode: this.props.userDate.get('organizationCode'),\n    });\n    this.setState({\n      staffsData: data.data,\n      fetching: false,\n    });\n  };\n\n  private handleChange = value => {\n    if (!this.state.value && !value) {\n      return;\n    }\n    this.setState({\n      value,\n      staffsData: [],\n      fetching: false,\n    });\n    if (this.props.onChange) {\n      this.props.onChange(value);\n    }\n  };\n}\n\nconst mapStateToProps = createStructuredSelector({\n  userDate: makeUserDate(),\n});\n\nexport const StaffPicker = connect(\n  mapStateToProps,\n  () => ({}),\n)(StaffPickerComponent);\n","import { StaffPicker } from 'components/StaffPicker/StaffPicker';\nexport default StaffPicker;\n","/**\n * CustomerAdd Component\n * @author lhf\n * @date 2018-10-24 14:27:35\n */\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Col from 'antd/es/col';\nimport DatePicker from 'antd/es/date-picker';\nimport Form from 'antd/es/form';\nimport { WrappedFormUtils } from 'antd/es/form/Form';\nimport Icon from 'antd/es/icon';\nimport Input from 'antd/es/input';\nimport message from 'antd/es/message';\nimport Modal from 'antd/es/modal';\nimport Row from 'antd/es/row';\nimport Upload from 'antd/es/upload';\nimport AddressSelect from 'components/AddressSelect';\nimport CarModelCarLong from 'components/CarModelCarLong';\nimport moment from 'moment';\n\nimport {\n  addDictionary,\n  deleteDictionary,\n  getDictionary,\n  getSaveHttp,\n} from 'components/CustomerAdd/service';\nimport IndustryPicker from 'components/IndustryPicker';\nimport MutiSelectWithEditableOptions from 'components/MutiSelectWithEditableOptions';\nimport StaffPicker from 'components/StaffPicker';\nimport { fromJS, List } from 'immutable';\n\nimport * as React from 'react';\nimport { createStructuredSelector } from 'reselect';\nimport {\n  // makeSelectCustomerTags,\n  makeSelectData,\n  makeSelectError,\n  makeSelectLoading,\n} from './selectors';\n\nimport styles from './index.module.less';\n\nconst FormItem = Form.Item;\nconst { RangePicker } = DatePicker;\nconst confirm = Modal.confirm;\nexport interface ICustomerAddProps {\n  children: React.ReactChildren;\n  loading: boolean;\n  form: WrappedFormUtils;\n  searchParams: {\n    id: number;\n  };\n  data?: any;\n  customerTags?: any;\n  getData: (routeId: number) => any;\n  toList: (handleClose?) => void;\n  close: () => void;\n  refresh: (data?) => any;\n  eventEmitter: object;\n}\ninterface IState {\n  data?: object;\n  fileList: [];\n  customertagList: List<Map<string, any>>;\n  customerTags: [];\n}\ninterface IIndustyData {\n  industry: string;\n  industryCode: string | number;\n}\nclass CustomerAdd extends React.PureComponent<ICustomerAddProps> {\n  state: IState;\n  selectedAddress: object;\n  industyData: IIndustyData;\n  constructor(props) {\n    super(props);\n    this.state = {\n      customertagList: List(),\n      customerTags: this.props.data.customerTags || [],\n      fileList: [],\n    };\n  }\n\n  public componentDidMount() {\n    const { searchParams, data } = this.props;\n    if (searchParams.id) {\n      this.props.getData(searchParams.id);\n    }\n    this.setState({\n      customerTags: data.toJS().customerTags || [],\n    });\n    this.getTags();\n\n    this.props.eventEmitter.on('close', (requestClose, eventSource) => {\n      if (\n        eventSource === 'FROM_TAB_CLOSE' ||\n        eventSource === 'FROM_TAB_REFRESH'\n      ) {\n        this.cancleEdit(requestClose);\n      } else {\n        requestClose();\n      }\n    });\n  }\n  componentWillReceiveProps(nextprops) {\n    if (nextprops.data.toJS().customerTags) {\n      this.setState({\n        customerTags: nextprops.data.toJS().customerTags || [],\n      });\n      this.getTags();\n    }\n  }\n  public render() {\n    const { custAttachments } = this.props.data.toJS();\n    const { id } = this.props.searchParams;\n\n    const state = this.state;\n    const formItemLayout = {\n      labelCol: {\n        span: 5,\n      },\n      wrapperCol: { span: 16 },\n    };\n    const {\n      getFieldDecorator,\n      getFieldValue,\n      setFieldsValue,\n    } = this.props.form;\n\n    const customerTagsProps = {\n      options: state.customertagList,\n      placeholder: '创建标签，打标客户，分层管理',\n      addInputPlaceHolder: '请输入添加的客户标签',\n      addBtnText: '添加标签',\n      resetSelect: false,\n      isMuti: true,\n      tagSize: 5,\n      optionSize: 20,\n      removeOption: option => this.removeOption('customerTags', option),\n      addOption: option => this.addOption('customerTags', option),\n      addToForm: departments => this.addToForm('customerTags', departments),\n    };\n\n    const defaultFiles = [];\n    if (custAttachments && custAttachments.length) {\n      custAttachments.map(item => {\n        const urlArr = item.attachmentUrl.split('/');\n        defaultFiles.push({\n          uid: item.attachmentSeq.toString(),\n          name: urlArr[urlArr.length - 1],\n          status: 'done',\n          url: item.attachmentUrl,\n        });\n      });\n    }\n\n    console.log(defaultFiles, 'dddd', custAttachments);\n    return (\n      <div className={styles.CustomerAdd}>\n        <Card title={`${id ? '修改' : '新增'}客户`} bordered={true}>\n          <Form layout=\"horizontal\">\n            <FormItem {...formItemLayout} label=\"客户名称：\">\n              {getFieldDecorator('customerName', {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入客户名称',\n                  },\n                ],\n              })(<Input placeholder=\"请输入客户名称\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} required label=\"联系人：\">\n              <Row>\n                <Col md={8}>\n                  <FormItem>\n                    {getFieldDecorator('contact', {\n                      rules: [\n                        {\n                          required: true,\n                          message: '请输入客户联系人姓名',\n                        },\n                      ],\n                    })(\n                      <Input\n                        type=\"text\"\n                        placeholder=\"请输入姓名\"\n                        style={{ width: 100 }}\n                        maxLength={20}\n                      />,\n                    )}\n                  </FormItem>\n                </Col>\n                <Col md={16}>\n                  <FormItem>\n                    {getFieldDecorator('contactWay', {\n                      rules: [\n                        {\n                          required: true,\n                          message: '请输入客户联系方式',\n                        },\n                        {\n                          pattern: /^[\\d|\\-|\\s]*$/,\n                          message: '请输入正确的联系方式',\n                        },\n                      ],\n                    })(\n                      <Input\n                        type=\"text\"\n                        placeholder=\"请输入联系方式\"\n                        maxLength={20}\n                      />,\n                    )}\n                  </FormItem>\n                </Col>\n              </Row>\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"客户编码\">\n              {getFieldDecorator('customerCode', {\n                rules: [\n                  {\n                    required: true,\n                    message: '请输入客户编码',\n                  },\n                ],\n              })(<Input placeholder=\"请输入客户编码\" />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"行业分类：\">\n              {getFieldDecorator('industry', {})(\n                <IndustryPicker onChange={this.handleIndustyPicker} />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"结算方式：\">\n              {getFieldDecorator('settlementType', {})(\n                <IndustryPicker\n                  type=\"SettlementType\"\n                  placeholder=\"请选择结算方式\"\n                />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"合作期限：\">\n              {getFieldDecorator('cooperateDate')(\n                <RangePicker style={{ width: '100%' }} />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"客户打标：\">\n              {getFieldDecorator('customerTags', {})(\n                <MutiSelectWithEditableOptions {...customerTagsProps} />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"公司地址\">\n              {getFieldDecorator('address', {})(\n                <AddressSelect\n                  placeholder=\"请输入公司地址\"\n                  onSelected={this.onSelectedAddress}\n                  style={{ width: '100%' }}\n                />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"禁入车型：\">\n              {getFieldDecorator('offLimitCarTypes')(\n                <CarModelCarLong placeholder=\"请选择车型\" />,\n              )}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"销售经理：\">\n              {getFieldDecorator('salesman', {})(<StaffPicker maxLength={5} />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"上传文件：\">\n              {getFieldDecorator('custAttachments')(\n                <Upload\n                  action=\"/ehuodiGateway/utmsCore/basecs/uploadCustAttachment\"\n                  onChange={this.handleUploadFile}\n                  defaultFileList={defaultFiles}\n                >\n                  <Button disabled={state.fileList.length >= 5}>\n                    <Icon type=\"upload\" /> 点击上传\n                  </Button>\n                </Upload>,\n              )}\n            </FormItem>\n            <div style={{ textAlign: 'center' }}>\n              <Button\n                key={0}\n                type=\"primary\"\n                htmlType=\"submit\"\n                onClick={e => {\n                  this.handleSubmit(e);\n                }}\n              >\n                保存\n              </Button>\n              <Button\n                style={{ marginLeft: 10 }}\n                key={1}\n                onClick={() => {\n                  this.cancleEdit();\n                }}\n              >\n                取消\n              </Button>\n            </div>\n\n            {/* <CustomerAddModal data={data.toJS()} onCancel={this.cancleEdit} /> */}\n          </Form>\n        </Card>\n      </div>\n    );\n  }\n\n  private handleIndustyPicker = (value, options) => {\n    this.industyData = options;\n  };\n  // 处理上传文件\n  private handleUploadFile = file => {\n    const data = file.fileList.map((item, index) => {\n      return {\n        attachmentseq: index,\n        attachmenturl: item.status === 'done' ? item.response.data : '',\n      };\n    });\n    this.setState({\n      fileList: data,\n    });\n  };\n  private save = async values => {\n    const propsdata = this.props.data.toJS();\n\n    const cooperateDate = values.cooperateDate;\n    const dateData = {\n      cooperateBeginDate:\n        cooperateDate && cooperateDate.length\n          ? cooperateDate[0].format('YYYY-MM-DD 00:00:00')\n          : '',\n      cooperateEndDate:\n        cooperateDate && cooperateDate.length\n          ? cooperateDate[1].format('YYYY-MM-DD 23:59:59')\n          : '',\n    };\n    const files = {\n      custAttachments: JSON.stringify(this.state.fileList),\n    };\n    const options = {\n      ...values,\n      ...this.selectedAddress,\n      ...dateData,\n      ...files,\n    };\n    const salesman = [];\n    if (options.salesman && options.salesman.length) {\n      options.salesman.map(d => {\n        salesman.push({\n          jobcard: d.key,\n          name: d.label[0],\n        });\n      });\n      options.salesman = salesman;\n    }\n    options.offLimitCarTypes = JSON.stringify(options.offLimitCarTypes);\n    if (typeof options.customerTags !== 'string') {\n      let tags = '';\n      options.customerTags.map(d => {\n        tags += d.key + ',';\n      });\n      options.customerTags = tags;\n    }\n\n    try {\n      const data = await getSaveHttp({\n        ...propsdata,\n        ...options,\n        ...this.industyData,\n      });\n\n      if (options.utmsCustomerId) {\n        message.success('客户信息修改成功');\n      } else {\n        message.success('客户新增成功');\n      }\n      this.props.toList();\n    } catch (err) {\n      const msg = err && err.msg ? err.msg : '网络错误，请重试...';\n      message.error(msg || '操作失败');\n    }\n  };\n  private handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        this.save(values);\n      }\n    });\n  };\n  // 选择地址之后\n  private onSelectedAddress = options => {\n    this.selectedAddress = options || {\n      region: '',\n      province: '',\n      city: '',\n    };\n  };\n  // 选择客户标签\n  private addToForm = (type, options) => {\n    const { form } = this.props;\n    const tags = options\n      .filter(option => {\n        return option.checked;\n      })\n      .map(option => {\n        return option.value;\n      })\n      .join(',');\n    form.setFieldsValue({\n      customerTags: tags,\n    });\n    setTimeout(() => {\n      this.setState({\n        customerTags: options.filter(option => option.checked),\n        customertagList: options,\n      });\n    }, 0);\n  };\n  // 新增客户打标\n  private addOption = async (type, option) => {\n    const params = {\n      bizType: type,\n      dictionaryCode: option,\n    };\n    const result = await addDictionary(params);\n    if (result.result === 'success') {\n      await this.getTags();\n      // this.setState({\n      //   customertagList: fromJS(await this.getTags()),\n      // });\n    }\n  };\n  // 删除客户打标\n  private removeOption = async (type, option) => {\n    const params = {\n      bizType: type,\n      dictionaryCode: option,\n    };\n    const result = await deleteDictionary(params);\n    if (result.result === 'success') {\n      await this.getTags();\n    }\n  };\n  // 获取全部客户标签\n  private getTags = async () => {\n    const result = await getDictionary({\n      parentDictionaryCode: 'customerTags',\n    });\n    if (result.result === 'success') {\n      const tags = [];\n      let oldTags = '';\n      const { customerTags, customertagList } = this.state;\n      customerTags.map(d => {\n        oldTags += d.key + ',';\n      });\n      result.data.map((d, i) => {\n        let checked = false;\n        if (oldTags.includes(d.dictionaryName)) {\n          customerTags.map(tag => {\n            if (tag.key === d.dictionaryName) {\n              checked = tag.checked;\n            }\n          });\n        }\n\n        const t = {\n          key: d.dictionaryName,\n          value: d.dictionaryName,\n          checked,\n        };\n        tags.push(t);\n      });\n      this.setState({\n        customertagList: tags,\n      });\n    }\n  };\n\n  private cancleEdit = (requestClose?) => {\n    const comparativeFields = ['customerName'];\n    let showConfirm = false; // 判断是否需要触发离开提示窗口\n\n    if (this.props.form.isFieldsTouched(comparativeFields)) {\n      showConfirm = true;\n    }\n    if (showConfirm) {\n      confirm({\n        title: '有未保存的信息',\n        content: '如放弃，填写的信息将丢失',\n        okText: '继续填写',\n        cancelText: '放弃',\n        centered: true,\n        onCancel: () => {\n          if (requestClose) {\n            requestClose();\n          } else {\n            this.props.toList();\n          }\n        },\n      });\n    } else {\n      if (requestClose) {\n        requestClose();\n      } else {\n        this.props.toList();\n      }\n    }\n  };\n}\n\nexport default ({ routeId, connectModel }) => {\n  return connectModel(actions => {\n    const currentState = state => state.get(routeId);\n    return {\n      mapStateToProps: createStructuredSelector({\n        data: makeSelectData(currentState),\n        // customerTags: makeSelectCustomerTags(currentState),\n        error: makeSelectError(currentState),\n        loading: makeSelectLoading(currentState),\n      }),\n      mapDispatchToProps: dispatch => ({\n        toList: options => dispatch(actions.toList(options)),\n        getData: id => dispatch(actions.getAsyncData(id)),\n      }),\n    };\n  })(\n    Form.create({\n      mapPropsToFields(props: any) {\n        const data = props.data.toJS();\n        const fields = {};\n        Object.keys(data || {}).forEach(d => {\n          let itemData = data[d];\n\n          if (d === 'salesman' && itemData && itemData.length) {\n            const salesman = [];\n            JSON.parse(itemData).map(item => {\n              salesman.push({\n                key: item.jobcard,\n                label: [item.name],\n              });\n            });\n            itemData = salesman;\n          }\n          if (d === 'offLimitCarTypes' && itemData && itemData.length) {\n            itemData = JSON.parse(itemData);\n          }\n          // if (d === 'custAttachments' && itemData && itemData.length) {\n          //   const files = [];\n          //   itemData.map(item => {\n          //     const urlArr = item.attachmentUrl.split('/');\n          //     files.push({\n          //       uid: item.attachmentSeq.toString(),\n          //       url: item.attachmentUrl,\n          //       status: 'done',\n          //       name: urlArr[urlArr.length - 1],\n          //     });\n          //   });\n          //   itemData = files;\n          // }\n          fields[d] = Form.createFormField({\n            value: itemData,\n          });\n          fields.cooperateDate = Form.createFormField({\n            value: [\n              moment(data.cooperateBeginDate),\n              moment(data.cooperateEndDate),\n            ],\n          });\n        });\n        console.log(fields, 'ffff');\n        return {\n          ...fields,\n        };\n      },\n    })(CustomerAdd),\n  );\n};\n","/**\n * CustomerAdd selectors\n * @author lhf\n * @date 2018-10-24 14:27:35\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeSelectData = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('data'));\n"],"sourceRoot":""}