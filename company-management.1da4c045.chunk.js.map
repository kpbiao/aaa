{"version":3,"sources":["webpack:///./src/modules/module.company.management/EditCompanyModal.tsx","webpack:///./src/modules/module.company.management/service.ts","webpack:///./src/modules/module.company.management/index.tsx","webpack:///./src/modules/module.company.management/selectors.ts","webpack:///./src/modules/module.company.management/index.module.less"],"names":["FormItem","es_form","Item","itemLayout","labelCol","span","wrapperCol","EditCompanyModal_EditCompany","handleSubmit","_this$props","_this","props","form","onConfirm","getFieldValue","validateFields","errors","values","params","street","Object","keys","map","key","assign","utmsOrganizationId","handleClose","onClose","onAddressSelected","result","setFieldsValue","address","city","province","region","react","_this$props2","this","getFieldDecorator","formValue","_extends","label","required","rules","message","input","placeholder","maxLength","col","style","display","width","textAlign","pattern","commonRegExp","initialValue","max","AddressSelect","onSelected","type","_this$props3","visible","modalProps","title","get","centered","maskClosable","onOk","onCancel","modal","renderEditor","module_company_management_EditCompanyModal","create","mapPropsToFields","formObj","toObject","contactArray","split","managerName","createFormField","value","managerMobileNumber","_objectSpread","service_updateCompany","request","method","url","data","useMock","globalErrorMsg","then","res","service_addCompany","service_deleteCompany","qs_libfrom_dll_reference_dll_default","a","stringify","err","service_orderCompany","Content","layout","module_company_management_CompanyManagement","CompanyManagement","module_company_management_classCallCheck","module_company_management_possibleConstructorReturn","module_company_management_getPrototypeOf","call","paginationChange","skipCount","pageSize","current","setState","doSearch","state","handleSelect","selected","hideBranchTable","selectCompany","organizationCode","handleOpenModal","company","openModal","pickCompany","immutable_esfrom_dll_reference_dll","handleCloseModal","handleEditCompany","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","sent","success","getCompanyTree","error","stop","_x","apply","arguments","handleDeleteCompany","_ref2","_callee2","_context2","code","content","msg","_x2","renderHeaderTable","selectedCompany","loading","cardProps","bordered","tableProps","columns","dataIndex","className","index_module_default","nowrap","render","text","record","GLOBAL","emptyRecord","href","onClick","organizationType","divider","popconfirm","dataSource","organizationName","contacts","pagination","rowKey","card","table","renderBranchTable","dataCount","companyList","toArray","total","onChange","onShowSizeChange","extra","es_button","MyTable","moveNode","_ref3","_callee3","ids","_context3","utmsOrganizationIds","_x3","companyTree","SiderCompanyTree","renderContent","__webpack_exports__","_ref4","routeId","actions","selectState","mapStateToProps","libfrom_dll_reference_dll","selectors_makeSelectError","selectors_makeSelectLoading","selectors_makeSelectData","selectors_makeSelectList","selectors_makeSelectDataCount","pageIndex","selectors_makeSelectPageIndex","selectors_makeSelectCompany","withConnect","es","dispatch","getList","addCompany","updateCompany","redux","module","exports","contentBorder"],"mappings":"s9CAgBA,IAAMA,EAAWC,EAAA,EAAKC,KAChBC,GACJC,UAAYC,KAAM,GAClBC,YAAcD,KAAM,KAWhBE,2QAMGC,aAAe,WAAM,IAAAC,EACEC,EAAKC,MAAzBC,EADkBH,EAClBG,KAAMC,EADYJ,EACZI,UACNC,EAAkBF,EAAlBE,cACRF,EAAKG,eAAe,SAACC,EAAQC,GAC3B,IAAKD,EAAQ,CACX,IAAME,GAAWC,OAAQ,IACzBC,OAAOC,KAAKJ,GAAQK,IAAI,SAAAC,GACV,WAARA,EACFL,EAAOC,OAASF,EAAOM,GAEvBL,EAAOK,GAAON,EAAOM,KAGzBV,EACEO,OAAOI,OACLV,EAAc,QACRW,mBAAoBX,EAAc,WAExCI,UAMHQ,YAAc,WACnBhB,EAAKC,MAAMgB,aAENC,kBAAoB,SAAAC,IAEzBC,EAD2BpB,EAAKC,MAAMC,KAA9BkB,iBAENX,OAAQU,EAASA,EAAOE,QAAU,GAClCC,KAAMH,EAASA,EAAOG,KAAO,GAC7BC,SAAUJ,EAASA,EAAOI,SAAW,GACrCC,OAAQL,EAASA,EAAOK,OAAS,+PAvCbC,EAAA,+DA0CF,IAAAC,EACQC,KAAK1B,MAAzBC,EADYwB,EACZxB,KACA0B,GAFYF,EACNG,UACgB3B,EAAtB0B,mBACR,OACEH,EAAA,cAAClC,EAAA,EAAD,KACEkC,EAAA,cAACnC,EAADwC,KAAcrC,GAAYsC,MAAM,2BAAOC,UAAQ,IAC5CJ,EAAkB,oBACjBK,QAAUD,UAAU,EAAME,QAAS,gDADpCN,CAEEH,EAAA,cAACU,EAAA,GAAMC,YAAY,6CAAUC,UAAW,OAE7CZ,EAAA,cAACnC,EAADwC,KAAcrC,GAAYsC,MAAM,qBAAMC,UAAQ,IAC5CP,EAAA,cAACa,EAAA,GAAI3C,KAAM,IACT8B,EAAA,cAACnC,GAAS0C,UAAQ,GACfJ,EAAkB,eACjBK,QAAUD,UAAU,EAAME,QAAS,oCADpCN,CAEEH,EAAA,cAACU,EAAA,GAAMC,YAAY,iCAAQC,UAAW,QAG7CZ,EAAA,cAACa,EAAA,GAAI3C,KAAM,GACT8B,EAAA,sBACEc,OACEC,QAAS,eACTC,MAAO,OACPC,UAAW,WAJf,MAUFjB,EAAA,cAACa,EAAA,GAAI3C,KAAM,IACT8B,EAAA,cAACnC,GAAS0C,UAAQ,GACfJ,EAAkB,uBACjBK,QACID,UAAU,EAAME,QAAS,+CAEzBS,QAASC,EAAA,EACTV,QAAS,mEALdN,CAQEH,EAAA,cAACU,EAAA,GAAMC,YAAY,6CAAUC,UAAW,SAIjDZ,EAAA,cAAClC,EAAA,EAAKC,KAANsC,KAAerC,GAAYsC,MAAM,6BAC9BH,EAAkB,UACjBiB,aAAc,GACdZ,QAAUa,IAAK,IAAKZ,QAAS,6CAF9BN,CAICH,EAAA,cAACsB,EAAA,GACCX,YAAY,6CACZY,WAAYrB,KAAKT,sBAIvBO,EAAA,cAACnC,EAADwC,KAAcrC,GAAYsC,MAAM,eAAKQ,OAASC,QAAS,UACpDZ,EAAkB,SAAlBA,CAA4BH,EAAA,cAACU,EAAA,GAAMc,KAAK,aAE3CxB,EAAA,cAACnC,EAADwC,KAAcrC,GAAYsC,MAAM,eAAKQ,OAASC,QAAS,UACpDZ,EAAkB,OAAlBA,CAA0BH,EAAA,cAACU,EAAA,GAAMc,KAAK,aAEzCxB,EAAA,cAACnC,EAADwC,KAAcrC,GAAYsC,MAAM,eAAKQ,OAASC,QAAS,UACpDZ,EAAkB,WAAlBA,CAA8BH,EAAA,cAACU,EAAA,GAAMc,KAAK,+CAKnC,IAAAC,EACiBvB,KAAK1B,MAA5BkD,EADMD,EACNC,QACFC,GACJC,MAHYH,EACGrB,UAEEyB,IAAI,OAAS,2BAAS,2BACvCH,UACAI,UAAU,EACVC,cAAc,EACdC,KAAM9B,KAAK7B,aACX4D,SAAU/B,KAAKX,aAEjB,OAAOS,EAAA,cAACkC,EAAA,EAAUP,EAAazB,KAAKiC,qDA0BxCC,EAtByBtE,EAAA,EAAKuE,QAC5BC,iBADmC,SAClB9D,GACf,IAAMO,KACAwD,EAAU/D,EAAM4B,UAAUoC,WAgBhC,OAfAvD,OAAOC,KAAKqD,GAASpD,IAAI,SAAAC,GACvB,GAAY,aAARA,EAAoB,CACtB,IAAMqD,EAAeF,EAAQnD,GAAKsD,MAAM,KACxC3D,EAAO4D,YAAc7E,EAAA,EAAK8E,iBACxBC,MAAOJ,EAAa,KAEtB1D,EAAO+D,oBAAsBhF,EAAA,EAAK8E,iBAChCC,MAAOJ,EAAa,UAGtB1D,EAAOK,GAAOtB,EAAA,EAAK8E,iBACjBC,MAAON,EAAQnD,0UAIrB2D,IAAYhE,KAnBSjB,CAqBtBM,oCC3JU4E,EAAgB,SAAAjE,GAAM,OACjCE,OAAAgE,EAAA,EAAAhE,EAEIiE,OAAQ,OACRC,IAVJ,oEAWIC,KAAMrE,IAGNsE,SAAS,EACTC,gBAAgB,IAElBC,KAAK,SAAAC,GAAG,OAAIA,KAEHC,EAAa,SAAA1E,GAAM,OAC9BE,OAAAgE,EAAA,EAAAhE,EAEIiE,OAAQ,OACRC,IAzBJ,oEA0BIC,KAAMrE,IAGNsE,SAAS,EACTC,gBAAgB,IAElBC,KAAK,SAAAC,GAAG,OAAIA,KAKHE,EAAgB,SAAA3E,GAAM,OACjCE,OAAAgE,EAAA,EAAAhE,EAEIiE,OAAQ,OACRC,IArCJ,oEAsCIC,KAAMO,EAAAC,EAAGC,UAAU9E,KAGnBsE,SAAS,IAEXE,KAAK,SAAAC,GAAG,OAAIA,GAAK,SAAAM,GAAG,OAAIA,KAKfC,EAAe,SAAAhF,GAAM,OAChCE,OAAAgE,EAAA,EAAAhE,EAEIiE,OAAQ,OACRC,IAlDJ,yEAoDIC,KAAMO,EAAAC,EAAGC,UAAU9E,KAGnBsE,SAAS,EACTC,gBAAgB,IAElBC,KAAK,SAAAC,GAAG,OAAIA,+oCChCRQ,EAAYC,EAAA,EAAZD,QA0BFE,cAIJ,SAAAC,EAAY3F,GAAO,IAAAD,EAAA,mGAAA6F,CAAAlE,KAAAiE,IACjB5F,EAAA8F,EAAAnE,KAAAoE,EAAAH,GAAAI,KAAArE,KAAM1B,KAUDgG,iBAAmB,SAAAzF,GAAU,IAC1B0F,EAAiC1F,EAAjC0F,UAAWC,EAAsB3F,EAAtB2F,SAAUC,EAAY5F,EAAZ4F,QAC7BpG,EAAKqG,UACHH,YACAC,WACAC,YAEFpG,EAAKsG,SAAS9F,IAlBGR,EAoBZsG,SAAW,SAAC9F,GACjBR,EAAKC,MAAMqG,SACT5F,OAAOI,QAEHqF,SAAUnG,EAAKuG,MAAMJ,SACrBD,UAAWlG,EAAKuG,MAAML,WAExB1F,KA3BaR,EAoCZwG,aAAe,SAAAC,GACpBzG,EAAKqG,UACHK,gBAAsD,uBAArCD,EAASnD,IAAI,oBAC9B8C,QAAS,IAEXpG,EAAKC,MAAM0G,cAAcF,GACgB,uBAArCA,EAASnD,IAAI,qBACftD,EAAKsG,UACHM,iBAAkBH,EAASnD,IAAI,oBAC/B4C,UAAW,KA7CElG,EA2DZ6G,gBAAkB,SAACC,GACxB9G,EAAKqG,UACHU,WAAW,EACXC,YAAaF,EAAUpG,OAAAuG,EAAA,OAAAvG,CAAOoG,GAAWpG,OAAAuG,EAAA,IAAAvG,MA9D1BV,EAiEZkH,iBAAmB,WACxBlH,EAAKqG,UACHU,WAAW,KAnEI/G,EAsEZmH,kBAtEY,eAAAC,EAAAC,EAAAC,mBAAAC,KAsEQ,SAAAC,EAAMjH,GAAN,OAAA+G,mBAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WACrBrH,EAAOQ,mBADc,CAAA2G,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EAEFnD,EAAclE,GAFZ,OAGD,YAHCmH,EAAAG,KAGZ1G,QACTe,EAAA,EAAQ4F,QAAQ,wCAChB9H,EAAKqG,UACHU,WAAW,IAEb/G,EAAKsG,WACLtG,EAAKC,MAAM8H,kBAEX7F,EAAA,EAAQ8F,MAAM,wCAXON,EAAAE,KAAA,uBAAAF,EAAAE,KAAA,EAcF1C,EAAW3E,GAdT,OAeD,YAfCmH,EAAAG,KAeZ1G,QACTe,EAAA,EAAQ4F,QAAQ,wCAChB9H,EAAKqG,UACHU,WAAW,IAEb/G,EAAKsG,WACLtG,EAAKC,MAAM8H,kBAEX7F,EAAA,EAAQ8F,MAAM,wCAvBO,yBAAAN,EAAAO,SAAAT,EAAA7F,SAtER,gBAAAuG,GAAA,OAAAd,EAAAe,MAAAxG,KAAAyG,YAAA,GAAApI,EAkGZqI,oBAlGY,eAAAC,EAAAjB,EAAAC,mBAAAC,KAkGU,SAAAgB,EAAM1H,GAAN,IAAAM,EAAA,OAAAmG,mBAAAG,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAZ,KAAA,EACNzC,GAAgBpE,mBAAoBF,IAD9B,OAEL,aADhBM,EADqBqH,EAAAX,MAEhB1G,QACTe,EAAA,EAAQ4F,QAAQ,wCAChB9H,EAAKqG,UACHU,WAAW,EACXL,iBAAiB,IAEnB1G,EAAKsG,WACLtG,EAAKC,MAAM8H,kBAES,qBAAhB5G,EAAOsH,KACT9E,EAAA,EAAMqE,OACJ3E,MAAO,2BACPqF,QAASvH,EAAOwH,MAGlBzG,EAAA,EAAQ8F,MAAM,wCAjBS,wBAAAQ,EAAAP,SAAAM,EAAA5G,SAlGV,gBAAAiH,GAAA,OAAAN,EAAAH,MAAAxG,KAAAyG,YAAA,GAAApI,EAwHZ6I,kBAAoB,WAAM,IAAA9I,EACgBC,EAAKC,MAA5C6I,EADuB/I,EACvB+I,gBAA2BC,GADJhJ,EACNuG,SADMvG,EACIgJ,SAC7BC,GACJ3F,MAAOyF,EAAgBxF,IAAI,oBAC3B2F,UAAU,GAENC,GACJC,UAEI9F,MAAO,2BACP+F,UAAW,mBACXvI,IAAK,mBACLwI,UAAWC,EAAAjE,EAAOkE,OAClBC,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,iCACP+F,UAAW,WACXvI,IAAK,WACLwI,UAAWC,EAAAjE,EAAOkE,OAClBC,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,2BACP+F,UAAW,UACXvI,IAAK,UACL2I,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,eACP+F,UAAW,SACXvI,IAAK,SACL2I,OAAQ,SAACC,EAAMC,GAAP,OACNjI,EAAA,0BACEA,EAAA,mBACEoI,KAAK,eACLC,QAAS,kBAAM9J,EAAK6G,gBAAgB6C,KAFtC,gBAM6B,uBAA5BA,EAAOK,iBACNtI,EAAA,0BACEA,EAAA,cAACuI,EAAA,GAAQ/G,KAAK,aACdxB,EAAA,cAACwI,EAAA,GACC5G,MAAM,2EACNlD,UAAW,kBAAMH,EAAKqI,oBAAoBqB,EAAO7I,OAEjDY,EAAA,mBAAGoI,KAAK,gBAAR,kBAIJ,OAMVK,aAEIC,iBAAkBrB,EAAgBxF,IAAI,oBACtC8G,SACEtB,EAAgBxF,IAAI,eACpB,IACAwF,EAAgBxF,IAAI,uBACtBjC,SACGyH,EAAgBxF,IAAI,YACjBwF,EAAgBxF,IAAI,YACpB,KACHwF,EAAgBxF,IAAI,QAAUwF,EAAgBxF,IAAI,QAAU,KAC5DwF,EAAgBxF,IAAI,UACjBwF,EAAgBxF,IAAI,UACpB,KACHwF,EAAgBxF,IAAI,UACjBwF,EAAgBxF,IAAI,UACpB,IACNzC,IAAKiI,EAAgBxF,IAAI,sBACzB9B,OAAQsH,EAAgBxF,IAAI,UAC5BhC,KAAMwH,EAAgBxF,IAAI,QAC1B/B,SAAUuH,EAAgBxF,IAAI,YAC9ByG,iBAAkBjB,EAAgBxF,IAAI,oBACtC7C,OAAQqI,EAAgBxF,IAAI,YAGhCyF,UACAsB,YAAY,EACZC,OAAQ,OAEV,OACE7I,EAAA,cAAC8I,EAAA,EAASvB,EACRvH,EAAA,cAAC+I,EAAA,EAAUtB,KAjNElJ,EAsNZyK,kBAAoB,WAEzB,IAD4BzK,EAAKuG,MAAzBG,gBACR,CAF+B,IAAAhF,EAKa1B,EAAKC,MAAzCyK,EALuBhJ,EAKvBgJ,UAAWC,EALYjJ,EAKZiJ,YAAa5B,EALDrH,EAKCqH,QACxB3C,EAAYpG,EAAKuG,MAAjBH,QACF8C,GACJC,UAEI9F,MAAO,2BACP+F,UAAW,mBACXvI,IAAK,mBACLwI,UAAWC,EAAAjE,EAAOkE,OAClBC,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,iCACP+F,UAAW,WACXvI,IAAK,WACLwI,UAAWC,EAAAjE,EAAOkE,OAClBC,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,2BACP+F,UAAW,UACXvI,IAAK,UACL2I,OAAQ,SAACC,EAAMC,GAAP,OAAkBD,GAAQE,EAAA,EAAOC,eAGzCvG,MAAO,eACP+F,UAAW,SACXvI,IAAK,SACL4B,MAAO,QACP+G,OAAQ,SAACC,EAAMC,GAAP,OACNjI,EAAA,0BACEA,EAAA,mBACEoI,KAAK,eACLC,QAAS,kBAAM9J,EAAK6G,gBAAgB6C,KAFtC,gBAMAjI,EAAA,cAACuI,EAAA,GAAQ/G,KAAK,aACdxB,EAAA,cAACwI,EAAA,GACC5G,MAAM,+DACNlD,UAAW,kBAAMH,EAAKqI,oBAAoBqB,EAAO7I,OAEjDY,EAAA,mBAAGoI,KAAK,gBAAR,qBAMVK,WAAYS,EACRA,EACG/J,IAAI,SAAAkG,GAAO,OACVjG,IAAKiG,EAAQxD,IAAI,sBACjB6G,iBAAkBrD,EAAQxD,IAAI,oBAC9B8G,SACEtD,EAAQxD,IAAI,eACZ,IACAwD,EAAQxD,IAAI,uBACdjC,SACGyF,EAAQxD,IAAI,YAAcwD,EAAQxD,IAAI,YAAc,KACpDwD,EAAQxD,IAAI,QAAUwD,EAAQxD,IAAI,QAAU,KAC5CwD,EAAQxD,IAAI,UAAYwD,EAAQxD,IAAI,UAAY,KAChDwD,EAAQxD,IAAI,UAAYwD,EAAQxD,IAAI,UAAY,IACnD9B,OAAQsF,EAAQxD,IAAI,UACpBhC,KAAMwF,EAAQxD,IAAI,QAClB/B,SAAUuF,EAAQxD,IAAI,YACtB7C,OAAQqG,EAAQxD,IAAI,aAErBsH,aAEP7B,UACAsB,YACEjE,UACAyE,MAAOH,EACPI,SAAU9K,EAAKiG,iBACf8E,iBAAkB/K,EAAKiG,kBAEzBqE,OAAQ,OAEJtB,GACJ3F,MAAO,iCACP4F,UAAU,EACV+B,MACEvJ,EAAA,cAACwJ,EAAA,GAAOhI,KAAK,UAAU6G,QAAS,kBAAM9J,EAAK6G,oBAA3C,mCAKJ,OACEpF,EAAA,cAAC8I,EAAA,EAASvB,EACRvH,EAAA,cAACyJ,EAAA,EAAYhC,MApTAlJ,EAyTZmL,SAzTY,eAAAC,EAAA/D,EAAAC,mBAAAC,KAyTD,SAAA8D,EAAMC,GAAN,OAAAhE,mBAAAG,KAAA,SAAA8D,GAAA,cAAAA,EAAA5D,KAAA4D,EAAA3D,MAAA,cAAA2D,EAAA3D,KAAA,EACKpC,GACnBgG,oBAAqBF,IAFP,OAIM,YAJNC,EAAA1D,KAIL1G,SACTnB,EAAKC,MAAM8H,iBACX/H,EAAKsG,YANS,wBAAAiF,EAAAtD,SAAAoD,EAAA1J,SAzTC,gBAAA8J,GAAA,OAAAL,EAAAjD,MAAAxG,KAAAyG,YAAA,GAEjBpI,EAAKuG,OACHG,iBAAiB,EACjBK,WAAW,EACXC,YAAatG,OAAAuG,EAAA,IAAAvG,GACbwF,UAAW,EACXC,SAAU,GACVC,QAAS,GARMpG,yPAJWyB,EAAA,oEAoC5BE,KAAK1B,MAAM8H,iBACXpG,KAAK2E,mDAkBL,OACE7E,EAAA,cAAC8I,EAAA,GAAKlB,UAAW,eACd1H,KAAKkH,oBACLlH,KAAK8I,sDA6QI,IACNiB,EAAgB/J,KAAK1B,MAArByL,YACA1E,EAAgBrF,KAAK4E,MAArBS,YACR,OACEvF,EAAA,cAACA,EAAA,SAAD,KACEA,EAAA,cAACiE,EAAA,EAAD,KACEjE,EAAA,cAACkK,EAAA,GACCD,YAAaA,EACblF,aAAc7E,KAAK6E,aACnB2E,SAAUxJ,KAAKwJ,WAEjB1J,EAAA,cAACiE,EAAA,GAAO2D,UAAW,iBACjB5H,EAAA,cAACgE,EAAD,KAAU9D,KAAKiK,mBAGnBnK,EAAA,cAACoC,GACChC,UAAWmF,EACX7D,QAASxB,KAAK4E,MAAMQ,UACpB5G,UAAWwB,KAAKwF,kBAChBlG,QAASU,KAAKuF,yDAOxB2E,EAAA,iBAAeC,GAA0B,IAAvBC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,QASnBC,EAAc,SAAA1F,GAAK,OAAIA,EAAMjD,IAAIyI,IACjCG,EAAkBxL,OAAAyL,EAAA,yBAAAzL,EACtBsH,MCxa2B,SAAAiE,GAAW,OACxCvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAA6BA,EAAMjD,IAAI,WDua1D8I,CAAgBH,GACvBlD,QCta6B,SAAAkD,GAAW,OAC1CvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,aDoaD+I,CAAkBJ,GAC3BP,YCla0B,SAAAO,GAAW,OACvCvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,iBDgaGgJ,CAAeL,GAC5BtB,YC9Z0B,SAAAsB,GAAW,OACvCvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,iBD4ZGiJ,CAAeN,GAC5BvB,UC1Z+B,SAAAuB,GAAW,OAC5CvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,eDwZCkJ,CAAoBP,GAC/BQ,UCtZ+B,SAAAR,GAAW,OAC5CvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,eDoZCoJ,CAAoBT,GAC/BnD,gBClZ6B,SAAAmD,GAAW,OAC1CvL,OAAAyL,EAAA,eAAAzL,CAAeuL,EAAa,SAAC1F,GAAD,OAC1BA,EAAMjD,IAAI,qBDgZOqJ,CAAkBV,KAG/BW,EAAclM,OAAAmM,EAAA,QAAAnM,CAClBwL,EApByB,SAAAY,GAAQ,OACjC/E,eAAgB,kBAAM+E,EAASd,EAAQjE,mBACvCzB,SAAU,SAAA9F,GAAM,OAAIsM,EAASd,EAAQe,QAAQvM,KAC7CmG,cAAe,SAAA9B,GAAI,OAAIiI,EAASd,EAAQrF,cAAc9B,KACtDmI,WAAY,SAAAlG,GAAO,OAAIgG,EAASd,EAAQgB,WAAWlG,KACnDmG,cAAe,SAAAnG,GAAO,OAAIgG,EAASd,EAAQiB,cAAcnG,QAmB3D,OAAOpG,OAAAwM,EAAA,EAAAxM,CAAQkM,EAARlM,CAAqBiF,mDE7b9BwH,EAAAC,SAAkBC,cAAA,SAAA9D,OAAA","file":"company-management.1da4c045.chunk.js","sourcesContent":["/**\n * EditCompanyModal Component\n * @author HuangSiFei\n * @date 2018-9-14 11:05:19\n */\nimport Col from 'antd/es/col';\nimport Form from 'antd/es/form';\nimport { WrappedFormUtils } from 'antd/es/form/Form';\nimport Input from 'antd/es/input';\nimport Modal from 'antd/es/modal';\nimport AddressSelect from 'components/AddressSelect';\nimport * as React from 'react';\nimport { FIXED_TELEPHONE } from 'utils/commonRegExp';\n\nimport styles from 'modules/module.company.management/index.module.less';\n\nconst FormItem = Form.Item;\nconst itemLayout = {\n  labelCol: { span: 6 },\n  wrapperCol: { span: 16 },\n};\n\nexport interface IEditCompanyModalProps {\n  form: any;\n  formValue: any;\n  onClose: () => void;\n  onConfirm: (values) => void;\n  visible: boolean;\n}\n\nclass EditCompany extends React.PureComponent<IEditCompanyModalProps> {\n  // public componentWillReceiveProps(nextProps) {\n  //   if (nextProps.visible && !this.props.visible) {\n  //     nextProps.form.resetFields();\n  //   }\n  // }\n  public handleSubmit = () => {\n    const { form, onConfirm } = this.props;\n    const { getFieldValue } = form;\n    form.validateFields((errors, values) => {\n      if (!errors) {\n        const params = { street: '' };\n        Object.keys(values).map(key => {\n          if (key === 'street') {\n            params.street = values[key];\n          } else {\n            params[key] = values[key];\n          }\n        });\n        onConfirm(\n          Object.assign(\n            getFieldValue('key')\n              ? { utmsOrganizationId: getFieldValue('key') }\n              : {},\n            params,\n          ),\n        );\n      }\n    });\n  };\n  public handleClose = () => {\n    this.props.onClose();\n  };\n  public onAddressSelected = result => {\n    const { setFieldsValue } = this.props.form;\n    setFieldsValue({\n      street: result ? result.address : '',\n      city: result ? result.city : '',\n      province: result ? result.province : '',\n      region: result ? result.region : '',\n    });\n  };\n  public renderEditor() {\n    const { form, formValue } = this.props;\n    const { getFieldDecorator } = form;\n    return (\n      <Form>\n        <FormItem {...itemLayout} label=\"公司名称\" required>\n          {getFieldDecorator('organizationName', {\n            rules: [{ required: true, message: '请输入公司名称' }],\n          })(<Input placeholder=\"请输入公司名称\" maxLength={60} />)}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"联系人\" required>\n          <Col span={11}>\n            <FormItem required>\n              {getFieldDecorator('managerName', {\n                rules: [{ required: true, message: '请输入姓名' }],\n              })(<Input placeholder=\"请输入姓名\" maxLength={20} />)}\n            </FormItem>\n          </Col>\n          <Col span={2}>\n            <span\n              style={{\n                display: 'inline-block',\n                width: '100%',\n                textAlign: 'center',\n              }}\n            >\n              -\n            </span>\n          </Col>\n          <Col span={11}>\n            <FormItem required>\n              {getFieldDecorator('managerMobileNumber', {\n                rules: [\n                  { required: true, message: '请输入联系方式' },\n                  {\n                    pattern: FIXED_TELEPHONE,\n                    message: '请输入正确的联系方式!',\n                  },\n                ],\n              })(<Input placeholder=\"请输入联系方式\" maxLength={13} />)}\n            </FormItem>\n          </Col>\n        </FormItem>\n        <Form.Item {...itemLayout} label=\"公司地址\">\n          {getFieldDecorator('street', {\n            initialValue: '',\n            rules: [{ max: 200, message: '最多输入200个字' }],\n          })(\n            <AddressSelect\n              placeholder=\"请输入公司地址\"\n              onSelected={this.onAddressSelected}\n            />,\n          )}\n        </Form.Item>\n        <FormItem {...itemLayout} label=\"区域\" style={{ display: 'none' }}>\n          {getFieldDecorator('region')(<Input type=\"hidden\" />)}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"城市\" style={{ display: 'none' }}>\n          {getFieldDecorator('city')(<Input type=\"hidden\" />)}\n        </FormItem>\n        <FormItem {...itemLayout} label=\"省份\" style={{ display: 'none' }}>\n          {getFieldDecorator('province')(<Input type=\"hidden\" />)}\n        </FormItem>\n      </Form>\n    );\n  }\n  public render() {\n    const { visible, formValue } = this.props;\n    const modalProps = {\n      title: formValue.get('key') ? '修改公司' : '新增公司',\n      visible,\n      centered: true,\n      maskClosable: false,\n      onOk: this.handleSubmit,\n      onCancel: this.handleClose,\n    };\n    return <Modal {...modalProps}>{this.renderEditor()}</Modal>;\n  }\n}\n\nconst EditCompanyModal = Form.create({\n  mapPropsToFields(props: any) {\n    const params = {};\n    const formObj = props.formValue.toObject();\n    Object.keys(formObj).map(key => {\n      if (key === 'contacts') {\n        const contactArray = formObj[key].split('/');\n        params.managerName = Form.createFormField({\n          value: contactArray[0],\n        });\n        params.managerMobileNumber = Form.createFormField({\n          value: contactArray[1],\n        });\n      } else {\n        params[key] = Form.createFormField({\n          value: formObj[key],\n        });\n      }\n    });\n    return { ...params };\n  },\n})(EditCompany);\nexport default EditCompanyModal;\n","/**\n * CompanyStaff service\n * @author HuangSiFei\n * @date 2018-9-19 17:33:32\n */\nimport qs from 'qs';\nimport request, { mocker } from 'utils/request';\nimport { USE_MOCK } from '../../CONFIG';\n\nconst API_CREATEORG =\n  '/ehuodiGateway/utmsCore/utmsOrganizationcs/createUtmsOrganization';\nconst API_UPDATEORG =\n  '/ehuodiGateway/utmsCore/utmsOrganizationcs/updateUtmsOrganization';\nconst API_DELETEORG =\n  '/ehuodiGateway/utmsCore/utmsOrganizationcs/deleteUtmsOrganization';\nconst API_UPDATEORDER =\n  '/ehuodiGateway/utmsCore/utmsOrganizationcs/updateUtmsOrganizationOrder';\n\nexport const updateCompany = params =>\n  request(\n    {\n      method: 'post',\n      url: API_UPDATEORG,\n      data: params,\n    },\n    {\n      useMock: false,\n      globalErrorMsg: true,\n    },\n  ).then(res => res);\n\nexport const addCompany = params =>\n  request(\n    {\n      method: 'post',\n      url: API_CREATEORG,\n      data: params,\n    },\n    {\n      useMock: false,\n      globalErrorMsg: true,\n    },\n  ).then(res => res);\n\n/**\n * 删除公司\n */\nexport const deleteCompany = params =>\n  request(\n    {\n      method: 'post',\n      url: API_DELETEORG,\n      data: qs.stringify(params),\n    },\n    {\n      useMock: false,\n    },\n  ).then(res => res, err => err);\n\n/**\n * 调整顺序\n */\nexport const orderCompany = params =>\n  request(\n    {\n      method: 'post',\n      url: API_UPDATEORDER,\n      // data: params,\n      data: qs.stringify(params),\n    },\n    {\n      useMock: false,\n      globalErrorMsg: true,\n    },\n  ).then(res => res);\n","/**\n * CompanyManagement Component\n * @author HuangSiFei\n * @date 2018-9-14 11:05:19\n */\nimport Button from 'antd/es/button';\nimport Card from 'antd/es/card';\nimport Divider from 'antd/es/divider';\nimport Layout from 'antd/es/layout';\nimport message from 'antd/es/message';\nimport Modal from 'antd/es/modal';\nimport Popconfirm from 'antd/es/popconfirm';\nimport Table from 'antd/es/table';\nimport MyTable from 'components/MyTable';\nimport SiderCompanyTree from 'components/SiderCompanyTree';\nimport { fromJS, List, Map } from 'immutable';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\nimport GLOBAL from 'utils/GLOBAL';\nimport EditCompanyModal from './EditCompanyModal';\nimport {\n  addCompany,\n  deleteCompany,\n  orderCompany,\n  updateCompany,\n} from './service';\n\nimport {\n  makeSelectCompany,\n  makeSelectData,\n  makeSelectDataCount,\n  makeSelectError,\n  makeSelectList,\n  makeSelectLoading,\n  makeSelectPageIndex,\n} from './selectors';\n\nimport './index.less';\nimport styles from './index.module.less';\n\nconst { Content } = Layout;\n\nexport interface ICompanyManagementProps {\n  children: React.ReactChildren;\n  companyTree: List<Map<string, any>>;\n  companyList: List<Map<string, any>>;\n  loading: boolean;\n  pageIndex: number;\n  dataCount: number;\n  selectedCompany: Map<string, any>;\n  getCompanyTree: () => any;\n  doSearch: (params) => any;\n  selectCompany: (data?: object) => any;\n  updateCompany: (company) => void;\n  addCompany: (company) => void;\n}\n\ninterface ICompanyManagementState {\n  openModal: boolean;\n  hideBranchTable: boolean;\n  pickCompany: Map<string, any>;\n  skipCount: number;\n  pageSize: number;\n  current: number;\n}\n\nclass CompanyManagement extends React.PureComponent<\n  ICompanyManagementProps,\n  ICompanyManagementState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hideBranchTable: false,\n      openModal: false,\n      pickCompany: Map(),\n      skipCount: 0,\n      pageSize: 15,\n      current: 1,\n    };\n  }\n  public paginationChange = params => {\n    const { skipCount, pageSize, current } = params;\n    this.setState({\n      skipCount,\n      pageSize,\n      current,\n    });\n    this.doSearch(params);\n  };\n  public doSearch = (params?: any) => {\n    this.props.doSearch(\n      Object.assign(\n        {\n          pageSize: this.state.pageSize,\n          skipCount: this.state.skipCount,\n        },\n        params,\n      ),\n    );\n  };\n  public componentDidMount() {\n    this.props.getCompanyTree();\n    this.doSearch();\n  }\n\n  public handleSelect = selected => {\n    this.setState({\n      hideBranchTable: selected.get('organizationType') === '分公司',\n      current: 1,\n    });\n    this.props.selectCompany(selected);\n    if (selected.get('organizationType') === '总公司') {\n      this.doSearch({\n        organizationCode: selected.get('organizationCode'),\n        skipCount: 0,\n      });\n    }\n  };\n\n  public renderContent() {\n    return (\n      <Card className={'companyCard'}>\n        {this.renderHeaderTable()}\n        {this.renderBranchTable()}\n      </Card>\n    );\n  }\n\n  public handleOpenModal = (company?) => {\n    this.setState({\n      openModal: true,\n      pickCompany: company ? fromJS(company) : Map(),\n    });\n  };\n  public handleCloseModal = () => {\n    this.setState({\n      openModal: false,\n    });\n  };\n  public handleEditCompany = async values => {\n    if (values.utmsOrganizationId) {\n      const result = await updateCompany(values);\n      if (result.result === 'success') {\n        message.success('修改公司成功');\n        this.setState({\n          openModal: false,\n        });\n        this.doSearch();\n        this.props.getCompanyTree();\n      } else {\n        message.error('修改公司失败');\n      }\n    } else {\n      const result = await addCompany(values);\n      if (result.result === 'success') {\n        message.success('新增公司成功');\n        this.setState({\n          openModal: false,\n        });\n        this.doSearch();\n        this.props.getCompanyTree();\n      } else {\n        message.error('新增公司失败');\n      }\n    }\n  };\n\n  public handleDeleteCompany = async key => {\n    const result = await deleteCompany({ utmsOrganizationId: key });\n    if (result.result === 'success') {\n      message.success('删除公司成功');\n      this.setState({\n        openModal: false,\n        hideBranchTable: false,\n      });\n      this.doSearch();\n      this.props.getCompanyTree();\n    } else {\n      if (result.code === 'UTMS001020200100') {\n        Modal.error({\n          title: '无法删除',\n          content: result.msg,\n        });\n      } else {\n        message.error('删除公司失败');\n      }\n    }\n  };\n\n  public renderHeaderTable = () => {\n    const { selectedCompany, doSearch, loading } = this.props;\n    const cardProps = {\n      title: selectedCompany.get('organizationName'),\n      bordered: false,\n    };\n    const tableProps = {\n      columns: [\n        {\n          title: '公司名称',\n          dataIndex: 'organizationName',\n          key: 'organizationName',\n          className: styles.nowrap,\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '公司联系人',\n          dataIndex: 'contacts',\n          key: 'contacts',\n          className: styles.nowrap,\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '公司地址',\n          dataIndex: 'address',\n          key: 'address',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '操作',\n          dataIndex: 'action',\n          key: 'action',\n          render: (text, record) => (\n            <span>\n              <a\n                href=\"javascript:;\"\n                onClick={() => this.handleOpenModal(record)}\n              >\n                修改\n              </a>\n              {record.organizationType === '分公司' ? (\n                <span>\n                  <Divider type=\"vertical\" />\n                  <Popconfirm\n                    title=\"你确定要删除该分公司吗？\"\n                    onConfirm={() => this.handleDeleteCompany(record.key)}\n                  >\n                    <a href=\"javascript:;\">删除</a>\n                  </Popconfirm>\n                </span>\n              ) : (\n                ''\n              )}\n            </span>\n          ),\n        },\n      ],\n      dataSource: [\n        {\n          organizationName: selectedCompany.get('organizationName'),\n          contacts:\n            selectedCompany.get('managerName') +\n            '/' +\n            selectedCompany.get('managerMobileNumber'),\n          address:\n            (selectedCompany.get('province')\n              ? selectedCompany.get('province')\n              : '') +\n            (selectedCompany.get('city') ? selectedCompany.get('city') : '') +\n            (selectedCompany.get('region')\n              ? selectedCompany.get('region')\n              : '') +\n            (selectedCompany.get('street')\n              ? selectedCompany.get('street')\n              : ''),\n          key: selectedCompany.get('utmsOrganizationId'),\n          region: selectedCompany.get('region'),\n          city: selectedCompany.get('city'),\n          province: selectedCompany.get('province'),\n          organizationType: selectedCompany.get('organizationType'),\n          street: selectedCompany.get('street'),\n        },\n      ],\n      loading,\n      pagination: false,\n      rowKey: 'key',\n    };\n    return (\n      <Card {...cardProps}>\n        <Table {...tableProps} />\n      </Card>\n    );\n  };\n\n  public renderBranchTable = () => {\n    const { hideBranchTable } = this.state;\n    if (hideBranchTable) {\n      return;\n    }\n    const { dataCount, companyList, loading } = this.props;\n    const { current } = this.state;\n    const tableProps = {\n      columns: [\n        {\n          title: '公司名称',\n          dataIndex: 'organizationName',\n          key: 'organizationName',\n          className: styles.nowrap,\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '公司联系人',\n          dataIndex: 'contacts',\n          key: 'contacts',\n          className: styles.nowrap,\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '公司地址',\n          dataIndex: 'address',\n          key: 'address',\n          render: (text, record) => text || GLOBAL.emptyRecord,\n        },\n        {\n          title: '操作',\n          dataIndex: 'action',\n          key: 'action',\n          width: '105px',\n          render: (text, record) => (\n            <span>\n              <a\n                href=\"javascript:;\"\n                onClick={() => this.handleOpenModal(record)}\n              >\n                修改\n              </a>\n              <Divider type=\"vertical\" />\n              <Popconfirm\n                title=\"你确定要删除该公司吗\"\n                onConfirm={() => this.handleDeleteCompany(record.key)}\n              >\n                <a href=\"javascript:;\">删除</a>\n              </Popconfirm>\n            </span>\n          ),\n        },\n      ],\n      dataSource: companyList\n        ? companyList\n            .map(company => ({\n              key: company.get('utmsOrganizationId'),\n              organizationName: company.get('organizationName'),\n              contacts:\n                company.get('managerName') +\n                '/' +\n                company.get('managerMobileNumber'),\n              address:\n                (company.get('province') ? company.get('province') : '') +\n                (company.get('city') ? company.get('city') : '') +\n                (company.get('region') ? company.get('region') : '') +\n                (company.get('street') ? company.get('street') : ''),\n              region: company.get('region'),\n              city: company.get('city'),\n              province: company.get('province'),\n              street: company.get('street'),\n            }))\n            .toArray()\n        : [],\n      loading,\n      pagination: {\n        current,\n        total: dataCount,\n        onChange: this.paginationChange,\n        onShowSizeChange: this.paginationChange,\n      },\n      rowKey: 'key',\n    };\n    const cardProps = {\n      title: '下属分公司',\n      bordered: false,\n      extra: (\n        <Button type=\"primary\" onClick={() => this.handleOpenModal()}>\n          新增分公司\n        </Button>\n      ),\n    };\n    return (\n      <Card {...cardProps}>\n        <MyTable {...tableProps} />\n      </Card>\n    );\n  };\n\n  public moveNode = async ids => {\n    const result = await orderCompany({\n      utmsOrganizationIds: ids,\n    });\n    if (result.result === 'success') {\n      this.props.getCompanyTree();\n      this.doSearch();\n    }\n  };\n\n  public render() {\n    const { companyTree } = this.props;\n    const { pickCompany } = this.state;\n    return (\n      <React.Fragment>\n        <Layout>\n          <SiderCompanyTree\n            companyTree={companyTree}\n            handleSelect={this.handleSelect}\n            moveNode={this.moveNode}\n          />\n          <Layout className={'companyLayout'}>\n            <Content>{this.renderContent()}</Content>\n          </Layout>\n        </Layout>\n        <EditCompanyModal\n          formValue={pickCompany}\n          visible={this.state.openModal}\n          onConfirm={this.handleEditCompany}\n          onClose={this.handleCloseModal}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ({ routeId, actions }) => {\n  const mapDispatchToProps = dispatch => ({\n    getCompanyTree: () => dispatch(actions.getCompanyTree()),\n    doSearch: params => dispatch(actions.getList(params)),\n    selectCompany: data => dispatch(actions.selectCompany(data)),\n    addCompany: company => dispatch(actions.addCompany(company)),\n    updateCompany: company => dispatch(actions.updateCompany(company)),\n  });\n\n  const selectState = state => state.get(routeId);\n  const mapStateToProps = createStructuredSelector({\n    error: makeSelectError(selectState),\n    loading: makeSelectLoading(selectState),\n    companyTree: makeSelectData(selectState),\n    companyList: makeSelectList(selectState),\n    dataCount: makeSelectDataCount(selectState),\n    pageIndex: makeSelectPageIndex(selectState),\n    selectedCompany: makeSelectCompany(selectState),\n  });\n\n  const withConnect = connect(\n    mapStateToProps,\n    mapDispatchToProps,\n  );\n\n  return compose(withConnect)(CompanyManagement);\n};\n","/**\n * CompanyManagement selectors\n * @author HuangSiFei\n * @date 2018-9-14 11:05:19\n */\nimport { Map } from 'immutable';\nimport { createSelector } from 'reselect';\n\nexport const makeSelectError = selectState =>\n  createSelector(selectState, (state: Map<string, any>) => state.get('error'));\n\nexport const makeSelectLoading = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('loading'),\n  );\n\nexport const makeSelectData = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('companyTree'),\n  );\n\nexport const makeSelectList = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('companyList'),\n  );\n\nexport const makeSelectDataCount = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('dataCount'),\n  );\n\nexport const makeSelectPageIndex = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('pageIndex'),\n  );\n\nexport const makeSelectCompany = selectState =>\n  createSelector(selectState, (state: Map<string, any>) =>\n    state.get('selectedCompany'),\n  );\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentBorder\":\"_7lG3H\",\"nowrap\":\"_35owr\"};"],"sourceRoot":""}